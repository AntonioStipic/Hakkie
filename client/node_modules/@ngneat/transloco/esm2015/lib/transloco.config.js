/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export const TRANSLOCO_CONFIG = new InjectionToken('TRANSLOCO_CONFIG', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    () => {
        return {};
    })
});
/** @type {?} */
export const defaultConfig = {
    defaultLang: 'en',
    reRenderOnLangChange: false,
    prodMode: false,
    failedRetries: 2,
    availableLangs: [],
    missingHandler: {
        logMissingKey: true,
        useFallbackTranslation: false,
        allowEmpty: false
    },
    flatten: {
        aot: false
    }
};
/**
 * @deprecated
 * @param {?=} config
 * @return {?}
 */
export function provideTranslocoConfig(config = defaultConfig) {
    return {
        provide: TRANSLOCO_CONFIG,
        useValue: Object.assign({}, defaultConfig, config)
    };
}
/**
 * Sets up TranslocoConfig object.
 *
 * @param {?=} config The partial config object to load, this is optional,
 * will be spread after defaultConfig.
 * @return {?}
 */
export function translocoConfig(config = defaultConfig) {
    return Object.assign({}, defaultConfig, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDOztBQXNCekQsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFDLGtCQUFrQixFQUFFO0lBQ3JFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFLEdBQUcsRUFBRTtRQUNaLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFBO0NBQ0YsQ0FBQzs7QUFFRixNQUFNLE9BQU8sYUFBYSxHQUFvQjtJQUM1QyxXQUFXLEVBQUUsSUFBSTtJQUNqQixvQkFBb0IsRUFBRSxLQUFLO0lBQzNCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsYUFBYSxFQUFFLENBQUM7SUFDaEIsY0FBYyxFQUFFLEVBQUU7SUFDbEIsY0FBYyxFQUFFO1FBQ2QsYUFBYSxFQUFFLElBQUk7UUFDbkIsc0JBQXNCLEVBQUUsS0FBSztRQUM3QixVQUFVLEVBQUUsS0FBSztLQUNsQjtJQUNELE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRSxLQUFLO0tBQ1g7Q0FDRjs7Ozs7O0FBS0QsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFNBQW1DLGFBQWE7SUFDckYsT0FBTztRQUNMLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsUUFBUSxvQkFBTyxhQUFhLEVBQUssTUFBTSxDQUFFO0tBQzFDLENBQUM7QUFDSixDQUFDOzs7Ozs7OztBQVFELE1BQU0sVUFBVSxlQUFlLENBQUMsU0FBbUMsYUFBYTtJQUM5RSx5QkFBWSxhQUFhLEVBQUssTUFBTSxFQUFHO0FBQ3pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF2YWlsYWJsZUxhbmdzLCBIYXNoTWFwIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFRyYW5zbG9jb0NvbmZpZyA9IHtcbiAgZGVmYXVsdExhbmc6IHN0cmluZztcbiAgcmVSZW5kZXJPbkxhbmdDaGFuZ2U/OiBib29sZWFuO1xuICBwcm9kTW9kZT86IGJvb2xlYW47XG4gIGZhbGxiYWNrTGFuZz86IHN0cmluZyB8IHN0cmluZ1tdO1xuICBmYWlsZWRSZXRyaWVzPzogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgc2NvcGVNYXBwaW5nPzogSGFzaE1hcDxzdHJpbmc+O1xuICBhdmFpbGFibGVMYW5ncz86IEF2YWlsYWJsZUxhbmdzO1xuICBmbGF0dGVuPzoge1xuICAgIGFvdD86IGJvb2xlYW47XG4gIH07XG4gIG1pc3NpbmdIYW5kbGVyPzoge1xuICAgIGxvZ01pc3NpbmdLZXk/OiBib29sZWFuO1xuICAgIHVzZUZhbGxiYWNrVHJhbnNsYXRpb24/OiBib29sZWFuO1xuICAgIGFsbG93RW1wdHk/OiBib29sZWFuO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IFRSQU5TTE9DT19DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1RSQU5TTE9DT19DT05GSUcnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogKCkgPT4ge1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29uZmlnOiBUcmFuc2xvY29Db25maWcgPSB7XG4gIGRlZmF1bHRMYW5nOiAnZW4nLFxuICByZVJlbmRlck9uTGFuZ0NoYW5nZTogZmFsc2UsXG4gIHByb2RNb2RlOiBmYWxzZSxcbiAgZmFpbGVkUmV0cmllczogMixcbiAgYXZhaWxhYmxlTGFuZ3M6IFtdLFxuICBtaXNzaW5nSGFuZGxlcjoge1xuICAgIGxvZ01pc3NpbmdLZXk6IHRydWUsXG4gICAgdXNlRmFsbGJhY2tUcmFuc2xhdGlvbjogZmFsc2UsXG4gICAgYWxsb3dFbXB0eTogZmFsc2VcbiAgfSxcbiAgZmxhdHRlbjoge1xuICAgIGFvdDogZmFsc2VcbiAgfVxufTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVRyYW5zbG9jb0NvbmZpZyhjb25maWc6IFBhcnRpYWw8VHJhbnNsb2NvQ29uZmlnPiA9IGRlZmF1bHRDb25maWcpOiBQcm92aWRlciB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogVFJBTlNMT0NPX0NPTkZJRyxcbiAgICB1c2VWYWx1ZTogeyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfVxuICB9O1xufVxuXG4vKipcbiAqIFNldHMgdXAgVHJhbnNsb2NvQ29uZmlnIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gY29uZmlnIFRoZSBwYXJ0aWFsIGNvbmZpZyBvYmplY3QgdG8gbG9hZCwgdGhpcyBpcyBvcHRpb25hbCxcbiAqIHdpbGwgYmUgc3ByZWFkIGFmdGVyIGRlZmF1bHRDb25maWcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xvY29Db25maWcoY29uZmlnOiBQYXJ0aWFsPFRyYW5zbG9jb0NvbmZpZz4gPSBkZWZhdWx0Q29uZmlnKTogVHJhbnNsb2NvQ29uZmlnIHtcbiAgcmV0dXJuIHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XG59XG4iXX0=