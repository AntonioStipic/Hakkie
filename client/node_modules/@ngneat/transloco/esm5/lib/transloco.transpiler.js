/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.transpiler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, Injector } from '@angular/core';
import { getValue, isString, isObject, setValue, isDefined } from './helpers';
/** @type {?} */
export var TRANSLOCO_TRANSPILER = new InjectionToken('TRANSLOCO_TRANSPILER');
/**
 * @record
 */
export function TranslocoTranspiler() { }
if (false) {
    /**
     * @param {?} value
     * @param {?} params
     * @param {?} translation
     * @return {?}
     */
    TranslocoTranspiler.prototype.transpile = function (value, params, translation) { };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslocoTranspiler.prototype.onLangChanged = function (lang) { };
}
var DefaultTranspiler = /** @class */ (function () {
    function DefaultTranspiler() {
    }
    /**
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    DefaultTranspiler.prototype.transpile = /**
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    function (value, params, translation) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (isString(value)) {
            return value.replace(/{{(.*?)}}/g, (/**
             * @param {?} _
             * @param {?} match
             * @return {?}
             */
            function (_, match) {
                match = match.trim();
                if (isDefined(params[match])) {
                    return params[match];
                }
                return isDefined(translation[match]) ? _this.transpile(translation[match], params, translation) : '';
            }));
        }
        if (isObject(value) && params) {
            value = this.handleObject(value, params, translation);
        }
        return value;
    };
    /**
     *
     * @example
     *
     * const en = {
     *  a: {
     *    b: {
     *      c: "Hello {{ value }}"
     *    }
     *  }
     * }
     *
     * const params =  {
     *  "b.c": { value: "Transloco "}
     * }
     *
     * service.selectTranslate('a', params);
     *
     * // the first param will be the result of `en.a`.
     * // the second param will be `params`.
     * parser.transpile(value, params, {});
     *
     *
     */
    /**
     *
     * \@example
     *
     * const en = {
     *  a: {
     *    b: {
     *      c: "Hello {{ value }}"
     *    }
     *  }
     * }
     *
     * const params =  {
     *  "b.c": { value: "Transloco "}
     * }
     *
     * service.selectTranslate('a', params);
     *
     * // the first param will be the result of `en.a`.
     * // the second param will be `params`.
     * parser.transpile(value, params, {});
     *
     *
     * @protected
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    DefaultTranspiler.prototype.handleObject = /**
     *
     * \@example
     *
     * const en = {
     *  a: {
     *    b: {
     *      c: "Hello {{ value }}"
     *    }
     *  }
     * }
     *
     * const params =  {
     *  "b.c": { value: "Transloco "}
     * }
     *
     * service.selectTranslate('a', params);
     *
     * // the first param will be the result of `en.a`.
     * // the second param will be `params`.
     * parser.transpile(value, params, {});
     *
     *
     * @protected
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    function (value, params, translation) {
        var _this = this;
        if (params === void 0) { params = {}; }
        /** @type {?} */
        var result = value;
        Object.keys(params).forEach((/**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            // get the value of "b.c" inside "a" => "Hello {{ value }}"
            /** @type {?} */
            var v = getValue(result, p);
            // get the params of "b.c" => { value: "Transloco" }
            /** @type {?} */
            var getParams = getValue(params, p);
            // transpile the value => "Hello Transloco"
            /** @type {?} */
            var transpiled = _this.transpile(v, getParams, translation);
            // set "b.c" to `transpiled`
            result = setValue(result, p, transpiled);
        }));
        return result;
    };
    return DefaultTranspiler;
}());
export { DefaultTranspiler };
/**
 * @record
 */
export function TranslocoTranspilerFunction() { }
if (false) {
    /**
     * @param {...?} args
     * @return {?}
     */
    TranslocoTranspilerFunction.prototype.transpile = function (args) { };
}
/**
 * @param {?} argsString
 * @return {?}
 */
export function getFunctionArgs(argsString) {
    /** @type {?} */
    var splitted = argsString ? argsString.split(',') : [];
    /** @type {?} */
    var args = [];
    for (var i = 0; i < splitted.length; i++) {
        /** @type {?} */
        var value = splitted[i].trim();
        while (value[value.length - 1] === '\\') {
            i++;
            value = value.replace('\\', ',') + splitted[i];
        }
        args.push(value);
    }
    return args;
}
var FunctionalTranspiler = /** @class */ (function (_super) {
    tslib_1.__extends(FunctionalTranspiler, _super);
    function FunctionalTranspiler(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        return _this;
    }
    /**
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    FunctionalTranspiler.prototype.transpile = /**
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    function (value, params, translation) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (isString(value)) {
            /** @type {?} */
            var transpiled = value.replace(/\[\[\s*(\w+)\((.*)\)\s*]]/g, (/**
             * @param {?} match
             * @param {?} functionName
             * @param {?} args
             * @return {?}
             */
            function (match, functionName, args) {
                try {
                    /** @type {?} */
                    var func = _this.injector.get(functionName);
                    return func.transpile.apply(func, tslib_1.__spread(getFunctionArgs(args)));
                }
                catch (e) {
                    /** @type {?} */
                    var message = "There is an error in: '" + value + "'. \n                          Check that the you used the right syntax in your translation and that the implementation of " + functionName + " is correct.";
                    if (e.message.includes('NullInjectorError')) {
                        message = "You are using the '" + functionName + "' function in your translation but no provider was found!";
                    }
                    throw new Error(message);
                }
            }));
            return _super.prototype.transpile.call(this, transpiled, params, translation);
        }
        if (isObject(value) && params) {
            value = this.handleObject(value, params, translation);
        }
        return value;
    };
    FunctionalTranspiler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FunctionalTranspiler.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return FunctionalTranspiler;
}(DefaultTranspiler));
export { FunctionalTranspiler };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FunctionalTranspiler.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,