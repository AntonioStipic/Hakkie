/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-testing.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, NgModule } from '@angular/core';
import { TRANSLOCO_LOADER } from './transloco.loader';
import { of } from 'rxjs';
import { defaultProviders, TranslocoModule } from './transloco.module';
import { TRANSLOCO_CONFIG, translocoConfig } from './transloco.config';
var TestingLoader = /** @class */ (function () {
    function TestingLoader(langs) {
        this.langs = langs;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    TestingLoader.prototype.getTranslation = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        return of(this.langs[lang]);
    };
    TestingLoader.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TestingLoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['translocoLangs',] }] }
    ]; };
    return TestingLoader;
}());
export { TestingLoader };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TestingLoader.prototype.langs;
}
var TranslocoTestingModule = /** @class */ (function () {
    function TranslocoTestingModule() {
    }
    /**
     * @param {?} langs
     * @param {?=} config
     * @return {?}
     */
    TranslocoTestingModule.withLangs = /**
     * @param {?} langs
     * @param {?=} config
     * @return {?}
     */
    function (langs, config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: TranslocoTestingModule,
            providers: [
                {
                    provide: 'translocoLangs',
                    useValue: langs
                },
                {
                    provide: TRANSLOCO_LOADER,
                    useClass: TestingLoader
                },
                defaultProviders,
                {
                    provide: TRANSLOCO_CONFIG,
                    useValue: translocoConfig(tslib_1.__assign({ prodMode: true, missingHandler: { logMissingKey: false } }, config))
                }
            ]
        };
    };
    TranslocoTestingModule.decorators = [
        { type: NgModule, args: [{
                    exports: [TranslocoModule]
                },] }
    ];
    return TranslocoTestingModule;
}());
export { TranslocoTestingModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC90cmFuc2xvY28vIiwic291cmNlcyI6WyJsaWIvdHJhbnNsb2NvLXRlc3RpbmcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLGdCQUFnQixFQUFtQixNQUFNLG9CQUFvQixDQUFDO0FBRXZFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZFLE9BQU8sRUFBbUIsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFeEY7SUFFRSx1QkFBOEMsS0FBMkI7UUFBM0IsVUFBSyxHQUFMLEtBQUssQ0FBc0I7SUFBRyxDQUFDOzs7OztJQUU3RSxzQ0FBYzs7OztJQUFkLFVBQWUsSUFBWTtRQUN6QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Z0JBTkYsVUFBVTs7OztnREFFSSxNQUFNLFNBQUMsZ0JBQWdCOztJQUt0QyxvQkFBQztDQUFBLEFBUEQsSUFPQztTQU5ZLGFBQWE7Ozs7OztJQUNaLDhCQUE2RDs7QUFPM0U7SUFBQTtJQStCQSxDQUFDOzs7Ozs7SUEzQlEsZ0NBQVM7Ozs7O0lBQWhCLFVBQ0UsS0FBMkIsRUFDM0IsTUFBcUM7UUFBckMsdUJBQUEsRUFBQSxXQUFxQztRQUVyQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjtvQkFDekIsUUFBUSxFQUFFLEtBQUs7aUJBQ2hCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxnQkFBZ0I7b0JBQ3pCLFFBQVEsRUFBRSxhQUFhO2lCQUN4QjtnQkFDRCxnQkFBZ0I7Z0JBQ2hCO29CQUNFLE9BQU8sRUFBRSxnQkFBZ0I7b0JBQ3pCLFFBQVEsRUFBRSxlQUFlLG9CQUN2QixRQUFRLEVBQUUsSUFBSSxFQUNkLGNBQWMsRUFBRSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsSUFDckMsTUFBTSxFQUNUO2lCQUNIO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBOUJGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUM7aUJBQzNCOztJQTZCRCw2QkFBQztDQUFBLEFBL0JELElBK0JDO1NBNUJZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRSQU5TTE9DT19MT0FERVIsIFRyYW5zbG9jb0xvYWRlciB9IGZyb20gJy4vdHJhbnNsb2NvLmxvYWRlcic7XG5pbXBvcnQgeyBIYXNoTWFwLCBUcmFuc2xhdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlZmF1bHRQcm92aWRlcnMsIFRyYW5zbG9jb01vZHVsZSB9IGZyb20gJy4vdHJhbnNsb2NvLm1vZHVsZSc7XG5pbXBvcnQgeyBUcmFuc2xvY29Db25maWcsIFRSQU5TTE9DT19DT05GSUcsIHRyYW5zbG9jb0NvbmZpZyB9IGZyb20gJy4vdHJhbnNsb2NvLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZXN0aW5nTG9hZGVyIGltcGxlbWVudHMgVHJhbnNsb2NvTG9hZGVyIHtcbiAgY29uc3RydWN0b3IoQEluamVjdCgndHJhbnNsb2NvTGFuZ3MnKSBwcml2YXRlIGxhbmdzOiBIYXNoTWFwPFRyYW5zbGF0aW9uPikge31cblxuICBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFRyYW5zbGF0aW9uPiB8IFByb21pc2U8VHJhbnNsYXRpb24+IHtcbiAgICByZXR1cm4gb2YodGhpcy5sYW5nc1tsYW5nXSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogW1RyYW5zbG9jb01vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgVHJhbnNsb2NvVGVzdGluZ01vZHVsZSB7XG4gIHN0YXRpYyB3aXRoTGFuZ3MoXG4gICAgbGFuZ3M6IEhhc2hNYXA8VHJhbnNsYXRpb24+LFxuICAgIGNvbmZpZzogUGFydGlhbDxUcmFuc2xvY29Db25maWc+ID0ge31cbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxUcmFuc2xvY29UZXN0aW5nTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBUcmFuc2xvY29UZXN0aW5nTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiAndHJhbnNsb2NvTGFuZ3MnLFxuICAgICAgICAgIHVzZVZhbHVlOiBsYW5nc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVFJBTlNMT0NPX0xPQURFUixcbiAgICAgICAgICB1c2VDbGFzczogVGVzdGluZ0xvYWRlclxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0UHJvdmlkZXJzLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVFJBTlNMT0NPX0NPTkZJRyxcbiAgICAgICAgICB1c2VWYWx1ZTogdHJhbnNsb2NvQ29uZmlnKHtcbiAgICAgICAgICAgIHByb2RNb2RlOiB0cnVlLFxuICAgICAgICAgICAgbWlzc2luZ0hhbmRsZXI6IHsgbG9nTWlzc2luZ0tleTogZmFsc2UgfSxcbiAgICAgICAgICAgIC4uLmNvbmZpZ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=