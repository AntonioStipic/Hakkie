/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { TranslocoLoaderComponent } from './loader-component.component';
import { TranslocoDirective } from './transloco.directive';
import { DefaultTranspiler, TRANSLOCO_TRANSPILER } from './transloco.transpiler';
import { TranslocoPipe } from './transloco.pipe';
import { DefaultHandler, TRANSLOCO_MISSING_HANDLER } from './transloco-missing-handler';
import { DefaultInterceptor, TRANSLOCO_INTERCEPTOR } from './transloco.interceptor';
import { DefaultFallbackStrategy, TRANSLOCO_FALLBACK_STRATEGY } from './transloco-fallback-strategy';
import { TRANSLOCO_CONFIG } from './transloco.config';
/** @type {?} */
export var defaultProviders = [
    {
        provide: TRANSLOCO_TRANSPILER,
        useClass: DefaultTranspiler
    },
    {
        provide: TRANSLOCO_MISSING_HANDLER,
        useClass: DefaultHandler
    },
    {
        provide: TRANSLOCO_INTERCEPTOR,
        useClass: DefaultInterceptor
    },
    {
        provide: TRANSLOCO_FALLBACK_STRATEGY,
        useClass: DefaultFallbackStrategy,
        deps: [TRANSLOCO_CONFIG]
    }
];
var TranslocoModule = /** @class */ (function () {
    function TranslocoModule() {
    }
    TranslocoModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TranslocoDirective, TranslocoPipe, TranslocoLoaderComponent],
                    providers: [defaultProviders],
                    exports: [TranslocoDirective, TranslocoPipe],
                    entryComponents: [TranslocoLoaderComponent]
                },] }
    ];
    return TranslocoModule;
}());
export { TranslocoModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBRXRELE1BQU0sS0FBTyxnQkFBZ0IsR0FBRztJQUM5QjtRQUNFLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsUUFBUSxFQUFFLGlCQUFpQjtLQUM1QjtJQUNEO1FBQ0UsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQyxRQUFRLEVBQUUsY0FBYztLQUN6QjtJQUNEO1FBQ0UsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixRQUFRLEVBQUUsa0JBQWtCO0tBQzdCO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7S0FDekI7Q0FDRjtBQUVEO0lBQUE7SUFNOEIsQ0FBQzs7Z0JBTjlCLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsd0JBQXdCLENBQUM7b0JBQzNFLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO29CQUM3QixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUM7b0JBQzVDLGVBQWUsRUFBRSxDQUFDLHdCQUF3QixDQUFDO2lCQUM1Qzs7SUFDNkIsc0JBQUM7Q0FBQSxBQU4vQixJQU0rQjtTQUFsQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbG9jb0xvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbG9hZGVyLWNvbXBvbmVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVHJhbnNsb2NvRGlyZWN0aXZlIH0gZnJvbSAnLi90cmFuc2xvY28uZGlyZWN0aXZlJztcbmltcG9ydCB7IERlZmF1bHRUcmFuc3BpbGVyLCBUUkFOU0xPQ09fVFJBTlNQSUxFUiB9IGZyb20gJy4vdHJhbnNsb2NvLnRyYW5zcGlsZXInO1xuaW1wb3J0IHsgVHJhbnNsb2NvUGlwZSB9IGZyb20gJy4vdHJhbnNsb2NvLnBpcGUnO1xuaW1wb3J0IHsgRGVmYXVsdEhhbmRsZXIsIFRSQU5TTE9DT19NSVNTSU5HX0hBTkRMRVIgfSBmcm9tICcuL3RyYW5zbG9jby1taXNzaW5nLWhhbmRsZXInO1xuaW1wb3J0IHsgRGVmYXVsdEludGVyY2VwdG9yLCBUUkFOU0xPQ09fSU5URVJDRVBUT1IgfSBmcm9tICcuL3RyYW5zbG9jby5pbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBEZWZhdWx0RmFsbGJhY2tTdHJhdGVneSwgVFJBTlNMT0NPX0ZBTExCQUNLX1NUUkFURUdZIH0gZnJvbSAnLi90cmFuc2xvY28tZmFsbGJhY2stc3RyYXRlZ3knO1xuaW1wb3J0IHsgVFJBTlNMT0NPX0NPTkZJRyB9IGZyb20gJy4vdHJhbnNsb2NvLmNvbmZpZyc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UHJvdmlkZXJzID0gW1xuICB7XG4gICAgcHJvdmlkZTogVFJBTlNMT0NPX1RSQU5TUElMRVIsXG4gICAgdXNlQ2xhc3M6IERlZmF1bHRUcmFuc3BpbGVyXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBUUkFOU0xPQ09fTUlTU0lOR19IQU5ETEVSLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0SGFuZGxlclxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogVFJBTlNMT0NPX0lOVEVSQ0VQVE9SLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0SW50ZXJjZXB0b3JcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFRSQU5TTE9DT19GQUxMQkFDS19TVFJBVEVHWSxcbiAgICB1c2VDbGFzczogRGVmYXVsdEZhbGxiYWNrU3RyYXRlZ3ksXG4gICAgZGVwczogW1RSQU5TTE9DT19DT05GSUddXG4gIH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1RyYW5zbG9jb0RpcmVjdGl2ZSwgVHJhbnNsb2NvUGlwZSwgVHJhbnNsb2NvTG9hZGVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbZGVmYXVsdFByb3ZpZGVyc10sXG4gIGV4cG9ydHM6IFtUcmFuc2xvY29EaXJlY3RpdmUsIFRyYW5zbG9jb1BpcGVdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtUcmFuc2xvY29Mb2FkZXJDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zbG9jb01vZHVsZSB7fVxuIl19