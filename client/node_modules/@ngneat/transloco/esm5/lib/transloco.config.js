/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InjectionToken } from '@angular/core';
/** @type {?} */
export var TRANSLOCO_CONFIG = new InjectionToken('TRANSLOCO_CONFIG', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    function () {
        return {};
    })
});
/** @type {?} */
export var defaultConfig = {
    defaultLang: 'en',
    reRenderOnLangChange: false,
    prodMode: false,
    failedRetries: 2,
    availableLangs: [],
    missingHandler: {
        logMissingKey: true,
        useFallbackTranslation: false,
        allowEmpty: false
    },
    flatten: {
        aot: false
    }
};
/**
 * @deprecated
 * @param {?=} config
 * @return {?}
 */
export function provideTranslocoConfig(config) {
    if (config === void 0) { config = defaultConfig; }
    return {
        provide: TRANSLOCO_CONFIG,
        useValue: tslib_1.__assign({}, defaultConfig, config)
    };
}
/**
 * Sets up TranslocoConfig object.
 *
 * @param {?=} config The partial config object to load, this is optional,
 * will be spread after defaultConfig.
 * @return {?}
 */
export function translocoConfig(config) {
    if (config === void 0) { config = defaultConfig; }
    return tslib_1.__assign({}, defaultConfig, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQzs7QUFzQnpELE1BQU0sS0FBTyxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRTtJQUNyRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPOzs7SUFBRTtRQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFBO0NBQ0YsQ0FBQzs7QUFFRixNQUFNLEtBQU8sYUFBYSxHQUFvQjtJQUM1QyxXQUFXLEVBQUUsSUFBSTtJQUNqQixvQkFBb0IsRUFBRSxLQUFLO0lBQzNCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsYUFBYSxFQUFFLENBQUM7SUFDaEIsY0FBYyxFQUFFLEVBQUU7SUFDbEIsY0FBYyxFQUFFO1FBQ2QsYUFBYSxFQUFFLElBQUk7UUFDbkIsc0JBQXNCLEVBQUUsS0FBSztRQUM3QixVQUFVLEVBQUUsS0FBSztLQUNsQjtJQUNELE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRSxLQUFLO0tBQ1g7Q0FDRjs7Ozs7O0FBS0QsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE1BQWdEO0lBQWhELHVCQUFBLEVBQUEsc0JBQWdEO0lBQ3JGLE9BQU87UUFDTCxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLFFBQVEsdUJBQU8sYUFBYSxFQUFLLE1BQU0sQ0FBRTtLQUMxQyxDQUFDO0FBQ0osQ0FBQzs7Ozs7Ozs7QUFRRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQWdEO0lBQWhELHVCQUFBLEVBQUEsc0JBQWdEO0lBQzlFLDRCQUFZLGFBQWEsRUFBSyxNQUFNLEVBQUc7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXZhaWxhYmxlTGFuZ3MsIEhhc2hNYXAgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgVHJhbnNsb2NvQ29uZmlnID0ge1xuICBkZWZhdWx0TGFuZzogc3RyaW5nO1xuICByZVJlbmRlck9uTGFuZ0NoYW5nZT86IGJvb2xlYW47XG4gIHByb2RNb2RlPzogYm9vbGVhbjtcbiAgZmFsbGJhY2tMYW5nPzogc3RyaW5nIHwgc3RyaW5nW107XG4gIGZhaWxlZFJldHJpZXM/OiBudW1iZXI7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBzY29wZU1hcHBpbmc/OiBIYXNoTWFwPHN0cmluZz47XG4gIGF2YWlsYWJsZUxhbmdzPzogQXZhaWxhYmxlTGFuZ3M7XG4gIGZsYXR0ZW4/OiB7XG4gICAgYW90PzogYm9vbGVhbjtcbiAgfTtcbiAgbWlzc2luZ0hhbmRsZXI/OiB7XG4gICAgbG9nTWlzc2luZ0tleT86IGJvb2xlYW47XG4gICAgdXNlRmFsbGJhY2tUcmFuc2xhdGlvbj86IGJvb2xlYW47XG4gICAgYWxsb3dFbXB0eT86IGJvb2xlYW47XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgVFJBTlNMT0NPX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbignVFJBTlNMT0NPX0NPTkZJRycsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5OiAoKSA9PiB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWc6IFRyYW5zbG9jb0NvbmZpZyA9IHtcbiAgZGVmYXVsdExhbmc6ICdlbicsXG4gIHJlUmVuZGVyT25MYW5nQ2hhbmdlOiBmYWxzZSxcbiAgcHJvZE1vZGU6IGZhbHNlLFxuICBmYWlsZWRSZXRyaWVzOiAyLFxuICBhdmFpbGFibGVMYW5nczogW10sXG4gIG1pc3NpbmdIYW5kbGVyOiB7XG4gICAgbG9nTWlzc2luZ0tleTogdHJ1ZSxcbiAgICB1c2VGYWxsYmFja1RyYW5zbGF0aW9uOiBmYWxzZSxcbiAgICBhbGxvd0VtcHR5OiBmYWxzZVxuICB9LFxuICBmbGF0dGVuOiB7XG4gICAgYW90OiBmYWxzZVxuICB9XG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlVHJhbnNsb2NvQ29uZmlnKGNvbmZpZzogUGFydGlhbDxUcmFuc2xvY29Db25maWc+ID0gZGVmYXVsdENvbmZpZyk6IFByb3ZpZGVyIHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlOiBUUkFOU0xPQ09fQ09ORklHLFxuICAgIHVzZVZhbHVlOiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9XG4gIH07XG59XG5cbi8qKlxuICogU2V0cyB1cCBUcmFuc2xvY29Db25maWcgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBjb25maWcgVGhlIHBhcnRpYWwgY29uZmlnIG9iamVjdCB0byBsb2FkLCB0aGlzIGlzIG9wdGlvbmFsLFxuICogd2lsbCBiZSBzcHJlYWQgYWZ0ZXIgZGVmYXVsdENvbmZpZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbG9jb0NvbmZpZyhjb25maWc6IFBhcnRpYWw8VHJhbnNsb2NvQ29uZmlnPiA9IGRlZmF1bHRDb25maWcpOiBUcmFuc2xvY29Db25maWcge1xuICByZXR1cm4geyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfTtcbn1cbiJdfQ==