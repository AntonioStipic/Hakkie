/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export { translate, TranslocoService } from './lib/transloco.service';
export { TranslocoDirective } from './lib/transloco.directive';
export { TranslocoPipe } from './lib/transloco.pipe';
export { TranslocoModule, defaultProviders } from './lib/transloco.module';
export { TRANSLOCO_LOADER } from './lib/transloco.loader';
export { TRANSLOCO_CONFIG, defaultConfig, provideTranslocoConfig, translocoConfig } from './lib/transloco.config';
export { TRANSLOCO_TRANSPILER, DefaultTranspiler, FunctionalTranspiler, getFunctionArgs } from './lib/transloco.transpiler';
export { TRANSLOCO_SCOPE } from './lib/transloco-scope';
export { TRANSLOCO_LOADING_TEMPLATE } from './lib/transloco-loading-template';
export { TRANSLOCO_LANG } from './lib/transloco-lang';
export { TestingLoader, TranslocoTestingModule } from './lib/transloco-testing.module';
export { TemplateHandler } from './lib/template-handler';
export { TRANSLOCO_INTERCEPTOR } from './lib/transloco.interceptor';
export { TRANSLOCO_FALLBACK_STRATEGY, DefaultFallbackStrategy } from './lib/transloco-fallback-strategy';
export { TRANSLOCO_MISSING_HANDLER } from './lib/transloco-missing-handler';
export { getBrowserCultureLang, getBrowserLang } from './lib/browser-lang';
export {} from './lib/types';
export { getValue, setValue, size, isEmpty, isFunction, isString, isNumber, isObject, coerceArray, toCamelCase, isBrowser, isNil, isDefined, toNumber, isScopeObject, hasInlineLoader, unflatten, flatten } from './lib/helpers';
export { getPipeValue } from './lib/shared';
export { getLangFromScope } from './lib/shared';
export { getScopeFromLang } from './lib/shared';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLWFwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsicHVibGljLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBbUIsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRSxPQUFPLEVBRUwsZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixzQkFBc0IsRUFDdEIsZUFBZSxFQUNoQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsaUJBQWlCLEVBRWpCLG9CQUFvQixFQUNwQixlQUFlLEVBRWhCLE1BQU0sNEJBQTRCLENBQUM7QUFFcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdkYsT0FBTyxFQUFFLGVBQWUsRUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxxQkFBcUIsRUFBd0IsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRixPQUFPLEVBQ0wsMkJBQTJCLEVBRTNCLHVCQUF1QixFQUN4QixNQUFNLG1DQUFtQyxDQUFDO0FBQzNDLE9BQU8sRUFDTCx5QkFBeUIsRUFHMUIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0UsZUFBYyxhQUFhLENBQUM7QUFDNUIsaU5BQWMsZUFBZSxDQUFDO0FBRTlCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IHRyYW5zbGF0ZSwgVHJhbnNsb2NvU2VydmljZSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5zZXJ2aWNlJztcbmV4cG9ydCB7IFRyYW5zbG9jb0RpcmVjdGl2ZSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5kaXJlY3RpdmUnO1xuZXhwb3J0IHsgVHJhbnNsb2NvUGlwZSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5waXBlJztcbmV4cG9ydCB7IFRyYW5zbG9jb01vZHVsZSwgZGVmYXVsdFByb3ZpZGVycyB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5tb2R1bGUnO1xuZXhwb3J0IHsgVFJBTlNMT0NPX0xPQURFUiwgVHJhbnNsb2NvTG9hZGVyIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLmxvYWRlcic7XG5leHBvcnQge1xuICBUcmFuc2xvY29Db25maWcsXG4gIFRSQU5TTE9DT19DT05GSUcsXG4gIGRlZmF1bHRDb25maWcsXG4gIHByb3ZpZGVUcmFuc2xvY29Db25maWcsXG4gIHRyYW5zbG9jb0NvbmZpZ1xufSBmcm9tICcuL2xpYi90cmFuc2xvY28uY29uZmlnJztcbmV4cG9ydCB7XG4gIFRSQU5TTE9DT19UUkFOU1BJTEVSLFxuICBEZWZhdWx0VHJhbnNwaWxlcixcbiAgVHJhbnNsb2NvVHJhbnNwaWxlcixcbiAgRnVuY3Rpb25hbFRyYW5zcGlsZXIsXG4gIGdldEZ1bmN0aW9uQXJncyxcbiAgVHJhbnNsb2NvVHJhbnNwaWxlckZ1bmN0aW9uXG59IGZyb20gJy4vbGliL3RyYW5zbG9jby50cmFuc3BpbGVyJztcbmV4cG9ydCB7IFRyYW5zbGF0aW9uLCBGYWlsZWRFdmVudCwgSGFzaE1hcCwgTG9hZGVkRXZlbnQsIFRyYW5zbG9jb0V2ZW50cyB9IGZyb20gJy4vbGliL3R5cGVzJztcbmV4cG9ydCB7IFRSQU5TTE9DT19TQ09QRSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby1zY29wZSc7XG5leHBvcnQgeyBUUkFOU0xPQ09fTE9BRElOR19URU1QTEFURSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby1sb2FkaW5nLXRlbXBsYXRlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MQU5HIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLWxhbmcnO1xuZXhwb3J0IHsgVGVzdGluZ0xvYWRlciwgVHJhbnNsb2NvVGVzdGluZ01vZHVsZSB9IGZyb20gJy4vbGliL3RyYW5zbG9jby10ZXN0aW5nLm1vZHVsZSc7XG5leHBvcnQgeyBUZW1wbGF0ZUhhbmRsZXIsIFZpZXcgfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1oYW5kbGVyJztcbmV4cG9ydCB7IFRSQU5TTE9DT19JTlRFUkNFUFRPUiwgVHJhbnNsb2NvSW50ZXJjZXB0b3IgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uaW50ZXJjZXB0b3InO1xuZXhwb3J0IHtcbiAgVFJBTlNMT0NPX0ZBTExCQUNLX1NUUkFURUdZLFxuICBUcmFuc2xvY29GYWxsYmFja1N0cmF0ZWd5LFxuICBEZWZhdWx0RmFsbGJhY2tTdHJhdGVneVxufSBmcm9tICcuL2xpYi90cmFuc2xvY28tZmFsbGJhY2stc3RyYXRlZ3knO1xuZXhwb3J0IHtcbiAgVFJBTlNMT0NPX01JU1NJTkdfSEFORExFUixcbiAgVHJhbnNsb2NvTWlzc2luZ0hhbmRsZXIsXG4gIFRyYW5zbG9jb01pc3NpbmdIYW5kbGVyRGF0YVxufSBmcm9tICcuL2xpYi90cmFuc2xvY28tbWlzc2luZy1oYW5kbGVyJztcbmV4cG9ydCB7IGdldEJyb3dzZXJDdWx0dXJlTGFuZywgZ2V0QnJvd3NlckxhbmcgfSBmcm9tICcuL2xpYi9icm93c2VyLWxhbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvdHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvaGVscGVycyc7XG5leHBvcnQgeyBQcm92aWRlclNjb3BlIH0gZnJvbSAnLi9saWIvdHlwZXMnO1xuZXhwb3J0IHsgZ2V0UGlwZVZhbHVlIH0gZnJvbSAnLi9saWIvc2hhcmVkJztcbmV4cG9ydCB7IGdldExhbmdGcm9tU2NvcGUgfSBmcm9tICcuL2xpYi9zaGFyZWQnO1xuZXhwb3J0IHsgZ2V0U2NvcGVGcm9tTGFuZyB9IGZyb20gJy4vbGliL3NoYXJlZCc7XG4iXX0=