import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class DebounceChangeDirective implements AfterViewInit, OnDestroy {
    private _el;
    private _ngZone;
    private _defaultDebounceTime;
    constructor(_el: ElementRef, _ngZone: NgZone, _defaultDebounceTime: number);
    /**
     * time to forward to the debounceTime pipe
     */
    debounceTime: any;
    /**
     * Any valid html event
     */
    debounceChangeEventType: string;
    /**
     * If true and the event has a 'target.value'
     * we listen for it and only emit if the value changed
     */
    emitOnlyOnChange: boolean;
    /**
     * Emits original event after debounce
     */
    jpDebounceChange: EventEmitter<string>;
    subscription: Subscription;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DebounceChangeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DebounceChangeDirective, "[jpDebounceChange]", never, { "debounceChangeEventType": "debounceChangeEventType"; "emitOnlyOnChange": "emitOnlyOnChange"; "debounceTime": "debounceTime"; }, { "jpDebounceChange": "jpDebounceChange"; }, never>;
}

//# sourceMappingURL=debounce-change.directive.d.ts.map