import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
/**
 * Emits an event when a click action occurs that does not target the element
 *
 * @example
 * <div (jpClickOutside)="doSomething()"></div>
 */
import * as ɵngcc0 from '@angular/core';
export declare class ClickOutsideDirective implements AfterViewInit, OnDestroy {
    private _el;
    private _ngZone;
    constructor(_el: ElementRef, _ngZone: NgZone);
    /**
     * Any valid html event
     */
    clickOutsideEventType: string;
    /**
     * if true jpClickOutside doesn't emit
     */
    clickOutsideBlock: boolean;
    /**
     * Emits when triggered event doesn't contain this e
     */
    jpClickOutside: EventEmitter<MouseEvent>;
    subscription: Subscription;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClickOutsideDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClickOutsideDirective, "[jpClickOutside]", never, { "clickOutsideEventType": "clickOutsideEventType"; "clickOutsideBlock": "clickOutsideBlock"; }, { "jpClickOutside": "jpClickOutside"; }, never>;
}

//# sourceMappingURL=click-outside.directive.d.ts.map