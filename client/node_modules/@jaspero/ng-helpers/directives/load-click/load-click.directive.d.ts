import { ElementRef, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
/**
 * Directive will add loading class to the host element on click event
 * Usage: [jpLoadClick]="save()"
 * Function save() should return observable
 */
import * as ɵngcc0 from '@angular/core';
export declare class LoadClickDirective implements OnInit, OnDestroy {
    private _el;
    private _renderer;
    private _defaultLoadClickClass;
    constructor(_el: ElementRef, _renderer: Renderer2, _defaultLoadClickClass: string);
    jpLoadClick: () => Observable<any>;
    loadClickEventType: string;
    loadClickStopPropagation: boolean;
    loadClickPreventDefault: boolean;
    loadClickClass: string;
    disableAttribute: boolean;
    subscription: Subscription;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LoadClickDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LoadClickDirective, "[jpLoadClick]", never, { "loadClickEventType": "loadClickEventType"; "loadClickStopPropagation": "loadClickStopPropagation"; "loadClickPreventDefault": "loadClickPreventDefault"; "disableAttribute": "disableAttribute"; "jpLoadClick": "jpLoadClick"; "loadClickClass": "loadClickClass"; }, {}, never>;
}

//# sourceMappingURL=load-click.directive.d.ts.map