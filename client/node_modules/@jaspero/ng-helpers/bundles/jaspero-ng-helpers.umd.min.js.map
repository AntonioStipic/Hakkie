{"version":3,"sources":["../../../../projects/ng-helpers/src/directives/click-outside/click-outside.directive.ts","../../../../projects/ng-helpers/src/directives/click-outside/click-outside.module.ts","../../../../projects/ng-helpers/src/directives/stop-propagation/stop-propagation.directive.ts","../../../../projects/ng-helpers/src/directives/stop-propagation/stop-propagation.module.ts","../../../../projects/ng-helpers/src/directives/form-touch-on-hover/form-touch-on-hover.directive.ts","../../../../projects/ng-helpers/src/directives/form-touch-on-hover/form-touch-on-hover.module.ts","../../../../projects/ng-helpers/src/directives/debounce-change/debounce-time.const.ts","../../../../projects/ng-helpers/src/directives/debounce-change/debounce-change.directive.ts","../../../../projects/ng-helpers/src/directives/debounce-change/debounce-change.module.ts","../../../../projects/ng-helpers/src/directives/track-by-field/track-by-field.directive.ts","../../../../projects/ng-helpers/src/directives/track-by-field/track-by-field.module.ts","../../../../projects/ng-helpers/src/directives/load-click/load-click-class.const.ts","../../../../projects/ng-helpers/src/directives/load-click/load-click.directive.ts","../../../../projects/ng-helpers/src/directives/load-click/load-click.module.ts","../../../../projects/ng-helpers/src/pipes/enum/enum.pipe.ts","../../../../projects/ng-helpers/src/pipes/enum/enum.module.ts","../../../../projects/ng-helpers/src/pipes/sanitize/sanitize.pipe.ts","../../../../projects/ng-helpers/src/pipes/sanitize/sanitize.module.ts","../../../../projects/ng-helpers/src/pipes/time-passed/time-passed.pipe.ts","../../../../projects/ng-helpers/src/pipes/time-passed/time-passed.module.ts","../../../../projects/ng-helpers/src/pipes/enum-key-format/enum-key-format.pipe.ts","../../../../projects/ng-helpers/src/pipes/enum-key-format/enum-key-format.module.ts","../../../../projects/ng-helpers/src/helpers/on-change.ts"],"names":["ClickOutsideDirective","_el","_ngZone","this","clickOutsideEventType","clickOutsideBlock","jpClickOutside","EventEmitter","prototype","ngAfterViewInit","_this","runOutsideAngular","subscription","fromEvent","window","pipe","filter","event","nativeElement","contains","target","subscribe","run","emit","ngOnDestroy","unsubscribe","Directive","args","selector","ElementRef","NgZone","Input","Output","NgModule","imports","CommonModule","declarations","exports","StopPropagationDirective","_renderer","stopPropagationEventType","preventDefault","jpStopPropagation","ngOnInit","listen","undefined","condition","sp","stopPropagation","Renderer2","FormTouchOnHoverDirective","jpFormTouched","enter","Array","isArray","jpFormTouchOnHover","forEach","form","markAllAsTouched","HostListener","DEBOUNCE_TIME","InjectionToken","DebounceChangeDirective","_defaultDebounceTime","debounceChangeEventType","emitOnlyOnChange","jpDebounceChange","prev","value","debounceTime","Inject","DebounceChangeModule","defaultDebounceTime","ngModule","providers","provide","useValue","ngFor","defaultKey","ngForTrackBy","index","item","ngForJpTrackByField","NgForOf","decorators","type","Host","TrackByFieldModule","TrackByFieldDirective","LOAD_CLICK_CLASS","LoadClickDirective","_defaultLoadClickClass","loadClickEventType","loadClickStopPropagation","loadClickPreventDefault","disableAttribute","defaultClass","loadClickClass","addClass","setAttribute","jpLoadClick","finalize","removeClass","removeAttribute","LoadClickModule","defaultLoadingClass","EnumPipe","transform","keys","enumMember","val","parseInt","isNaN","push","key","Pipe","name","SanitizePipe","_sanitizer","html","style","script","url","resourceUrl","DomSanitizer","Millisecond","Second","Minute","Hour","Day","Month","Year","TimePassedPipe","timeDiff","dateOne","dateTwo","Date","TimePassedType","day","hour","durationMap","_a","Math","round","abs","getTime","EnumKeyFormatPipe","defaultFormat","split","RegExp","join","enumValue","formatFunction","callback","cachedValueKey","Symbol","isFirstChangeKey","Object","defineProperty","set","oldValue","simpleChange","firstChange","previousValue","currentValue","isFirstChange","call","get"],"mappings":"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","sourcesContent":["import {AfterViewInit, Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n/**\n * Emits an event when a click action occurs that does not target the element\n *\n * @example\n * <div (jpClickOutside)=\"doSomething()\"></div>\n */\n@Directive({\n  selector: '[jpClickOutside]'\n})\nexport class ClickOutsideDirective implements AfterViewInit, OnDestroy {\n  constructor(private _el: ElementRef, private _ngZone: NgZone) {}\n\n  /**\n   * Any valid html event\n   */\n  @Input() clickOutsideEventType = 'click';\n\n  /**\n   * if true jpClickOutside doesn't emit\n   */\n  @Input() clickOutsideBlock = false;\n\n  /**\n   * Emits when triggered event doesn't contain this e\n   */\n  @Output() jpClickOutside = new EventEmitter<MouseEvent>();\n\n  subscription: Subscription;\n\n  ngAfterViewInit() {\n    this._ngZone.runOutsideAngular(() => {\n      this.subscription = fromEvent<MouseEvent>(window, this.clickOutsideEventType)\n        .pipe(\n          filter(\n            event =>\n              !this.clickOutsideBlock &&\n              !this._el.nativeElement.contains(event.target)\n          )\n        )\n        .subscribe(event => {\n          this._ngZone.run(() => {\n            this.jpClickOutside.emit(event);\n          });\n        });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ClickOutsideDirective} from './click-outside.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ClickOutsideDirective\n  ],\n  exports: [\n    ClickOutsideDirective\n  ]\n})\nexport class ClickOutsideModule { }\n","import {Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\n\n/**\n * Used for preventing propagation on event calls event.stopPropagation())\n *\n * @example\n * <div (jpStopPropagation)=\"doSomething()\"></div>\n */\n@Directive({\n  selector: '[jpStopPropagation]'\n})\nexport class StopPropagationDirective implements OnInit {\n  constructor(private _renderer: Renderer2, private _el: ElementRef) {}\n\n  /**\n   * Any valid html event\n   */\n  @Input() stopPropagationEventType = 'click';\n\n  /**\n   * Should preventDefault also be called\n   */\n  @Input() preventDefault = false;\n\n  @Input() condition: boolean | ((event: MouseEvent) => boolean);\n\n  /**\n   * Outputs the input event\n   */\n  @Output() jpStopPropagation = new EventEmitter();\n\n  ngOnInit() {\n    this._renderer.listen(\n      this._el.nativeElement,\n      this.stopPropagationEventType,\n      event => {\n        if (this.preventDefault) {\n          event.preventDefault();\n        }\n\n        if (this.condition !== undefined) {\n          if (typeof this.condition === 'boolean') {\n            if (this.condition) {\n              this.sp(event);\n            }\n          } else if (this.condition(event)) {\n            this.sp(event);\n          }\n        } else {\n          this.sp(event);\n        }\n      }\n    );\n  }\n\n  private sp(event) {\n    event.stopPropagation();\n    this.jpStopPropagation.emit(event);\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {StopPropagationDirective} from './stop-propagation.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    StopPropagationDirective\n  ],\n  exports: [\n    StopPropagationDirective\n  ]\n})\nexport class StopPropagationModule { }\n","import {\n  Directive,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output\n} from '@angular/core';\nimport {FormGroup, FormArray, FormControl} from '@angular/forms';\n\ntype entry = FormControl | FormGroup | FormArray;\n\n@Directive({\n  selector: '[jpFormTouchOnHover]'\n})\nexport class FormTouchOnHoverDirective {\n  @Input() jpFormTouchOnHover: entry | Array<entry>;\n\n  @Output() jpFormTouched = new EventEmitter();\n\n  @HostListener('mouseenter')\n  enter() {\n    if (Array.isArray(this.jpFormTouchOnHover)) {\n      this.jpFormTouchOnHover.forEach(form => form.markAllAsTouched());\n    } else {\n      this.jpFormTouchOnHover.markAllAsTouched();\n    }\n\n    this.jpFormTouched.emit();\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormTouchOnHoverDirective} from './form-touch-on-hover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    FormTouchOnHoverDirective\n  ],\n  exports: [\n    FormTouchOnHoverDirective\n  ]\n})\nexport class FormTouchOnHoverModule { }\n","import {InjectionToken} from '@angular/core';\n\nexport const DEBOUNCE_TIME = new InjectionToken<number>('DEBOUNCE_TIME');\n","import {AfterViewInit, Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, Output} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {debounceTime, filter} from 'rxjs/operators';\nimport {DEBOUNCE_TIME} from './debounce-time.const';\n\n@Directive({\n  selector: '[jpDebounceChange]'\n})\nexport class DebounceChangeDirective implements AfterViewInit, OnDestroy {\n  constructor(\n    private _el: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(DEBOUNCE_TIME) private _defaultDebounceTime: number\n  ) {}\n\n  /**\n   * time to forward to the debounceTime pipe\n   */\n  @Input() debounceTime;\n\n  /**\n   * Any valid html event\n   */\n  @Input() debounceChangeEventType = 'keyup';\n\n  /**\n   * If true and the event has a 'target.value'\n   * we listen for it and only emit if the value changed\n   */\n  @Input() emitOnlyOnChange = false;\n\n  /**\n   * Emits original event after debounce\n   */\n  @Output() jpDebounceChange = new EventEmitter<string>();\n\n  subscription: Subscription;\n\n  ngAfterViewInit() {\n    this._ngZone.runOutsideAngular(() => {\n\n      let prev = this._el.nativeElement.value;\n\n      this.subscription = fromEvent<any>(this._el.nativeElement, this.debounceChangeEventType)\n        .pipe(\n          debounceTime(this.debounceTime || this._defaultDebounceTime),\n          filter(event => {\n            return event.target &&\n              event.target.value !== undefined &&\n              this.emitOnlyOnChange ?\n                event.target.value !== prev :\n                true;\n          })\n        )\n        .subscribe(event => {\n          this._ngZone.run(() => {\n            if (event.target) {\n              prev = event.target.value;\n            }\n\n            this.jpDebounceChange.emit(event.target.value);\n          });\n        });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DebounceChangeDirective} from './debounce-change.directive';\nimport {DEBOUNCE_TIME} from './debounce-time.const';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    DebounceChangeDirective\n  ],\n  exports: [\n    DebounceChangeDirective\n  ],\n  providers: [\n    {\n      provide: DEBOUNCE_TIME,\n      useValue: 500\n    }\n  ]\n})\nexport class DebounceChangeModule {\n  static defaultDebounceTime(value: number): ModuleWithProviders<DebounceChangeModule> {\n    return {\n      ngModule: DebounceChangeModule,\n      providers: [\n        {\n          provide: DEBOUNCE_TIME,\n          useValue: value\n        }\n      ]\n    };\n  }\n}\n","import {NgForOf} from '@angular/common';\nimport {Directive, Host, Inject, Input, Optional} from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line\n  selector: '[ngForJpTrackByField]',\n})\nexport class TrackByFieldDirective<T> {\n\n  @Input()\n  public ngForJpTrackByField: keyof T;\n\n  constructor(\n    @Host() private ngFor: NgForOf<T>,\n    @Inject('defaultKey') private defaultKey: any\n  ) {\n    this.ngFor.ngForTrackBy = (index: number, item: T) => item[this.ngForJpTrackByField || this.defaultKey];\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {TrackByFieldDirective} from './track-by-field.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TrackByFieldDirective\n  ],\n  exports: [\n    TrackByFieldDirective\n  ],\n})\nexport class TrackByFieldModule {\n  static defaultKey(value = 'id'): ModuleWithProviders<TrackByFieldModule> {\n    return {\n      ngModule: TrackByFieldModule,\n      providers: [\n        {\n          provide: 'defaultKey',\n          useValue: value\n        }\n      ]\n    };\n  }\n}\n","import {InjectionToken} from '@angular/core';\n\nexport const LOAD_CLICK_CLASS = new InjectionToken<string>('LOAD_CLICK_CLASS');\n","import {Directive, ElementRef, Inject, Input, OnDestroy, OnInit, Renderer2} from '@angular/core';\nimport {Observable, Subscription} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {LOAD_CLICK_CLASS} from './load-click-class.const';\n\n/**\n * Directive will add loading class to the host element on click event\n * Usage: [jpLoadClick]=\"save()\"\n * Function save() should return observable\n */\n\n@Directive({selector: '[jpLoadClick]'})\nexport class LoadClickDirective implements OnInit, OnDestroy {\n  constructor(\n    private _el: ElementRef,\n    private _renderer: Renderer2,\n    @Inject(LOAD_CLICK_CLASS) private _defaultLoadClickClass: string\n  ) {}\n\n  @Input()\n  jpLoadClick: () => Observable<any>;\n\n  @Input()\n  loadClickEventType = 'click';\n\n  @Input()\n  loadClickStopPropagation = false;\n\n  @Input()\n  loadClickPreventDefault = false;\n\n  @Input()\n  loadClickClass: string;\n\n  @Input()\n  disableAttribute = true;\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this._renderer.listen(\n      this._el.nativeElement,\n      this.loadClickEventType,\n      event => {\n        const defaultClass = this.loadClickClass || this._defaultLoadClickClass;\n\n        if (this.loadClickStopPropagation) {\n          event.stopPropagation();\n        }\n\n        if (this.loadClickPreventDefault) {\n          event.preventDefault();\n        }\n\n        this._renderer.addClass(this._el.nativeElement, defaultClass);\n\n        if (this.disableAttribute) {\n          this._renderer.setAttribute(\n            this._el.nativeElement,\n            'disabled',\n            ''\n          );\n        }\n\n        this.subscription = this.jpLoadClick()\n          .pipe(\n            finalize(() => {\n              this._renderer.removeClass(this._el.nativeElement, defaultClass);\n\n              if (this.disableAttribute) {\n                this._renderer.removeAttribute(this._el.nativeElement, 'disabled');\n              }\n            })\n          )\n          .subscribe();\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {LoadClickDirective} from './load-click.directive';\nimport {LOAD_CLICK_CLASS} from './load-click-class.const';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    LoadClickDirective\n  ],\n  exports: [\n    LoadClickDirective\n  ],\n  providers: [\n    {\n      provide: LOAD_CLICK_CLASS,\n      useValue: 'loading'\n    }\n  ]\n})\nexport class LoadClickModule {\n  static defaultLoadingClass(value: string): ModuleWithProviders<LoadClickModule> {\n    return {\n      ngModule: LoadClickModule,\n      providers: [\n        {\n          provide: LOAD_CLICK_CLASS,\n          useValue: value\n        }\n      ]\n    };\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Returns an array of {key: number, value: string} objects.\n * Most useful in *ngFor iterations\n *\n * @example\n * <div *ngFor=\"let item of someEnum | enum></div>\n *\n */\n@Pipe({\n  name: 'jpEnum'\n})\nexport class EnumPipe implements PipeTransform {\n  public transform(value): Array<{key: number; value: string}> {\n    const keys = [];\n    for (const enumMember in value) {\n      if (value[enumMember]) {\n        const val = parseInt(enumMember, 10);\n        if (!isNaN(val)) {\n          keys.push({key: val, value: value[enumMember]});\n        }\n      }\n    }\n    return keys;\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {EnumPipe} from './enum.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    EnumPipe\n  ],\n  exports: [\n    EnumPipe\n  ]\n})\nexport class EnumModule { }\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n/**\n * Applies the appropriate DomSanitizer method\n * to inputted value.\n *\n * @example\n * <div [innerHtml]=\"someHtmlValue | sanitize\"></div>\n */\n@Pipe({\n  name: 'jpSanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n  constructor(\n    private _sanitizer: DomSanitizer\n  ) {}\n\n  transform(value: string, type = 'html') {\n\n    const sanitizeMap = {\n      html: 'bypassSecurityTrustHtml',\n      style: 'bypassSecurityTrustStyle',\n      script: 'bypassSecurityTrustScript',\n      url: 'bypassSecurityTrustUrl',\n      resourceUrl: 'bypassSecurityTrustResourceUrl'\n    };\n\n    return this._sanitizer[sanitizeMap[type]](value);\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {SanitizePipe} from './sanitize.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SanitizePipe\n  ],\n  exports: [\n    SanitizePipe\n  ]\n})\nexport class SanitizeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\nexport enum TimePassedType {\n  Millisecond,\n  Second,\n  Minute,\n  Hour,\n  Day,\n  Month,\n  Year\n}\n\n@Pipe({\n  name: 'jpTimePassed'\n})\nexport class TimePassedPipe implements PipeTransform {\n\n  static timeDiff(\n    dateOne: Date,\n    dateTwo: Date = new Date(),\n    type = TimePassedType.Day\n  ) {\n    const oneDay = 24 * 60 * 60 * 1000;\n\n    const minute = 60 * 1000;\n    const hour = 60 * minute;\n    const day = hour * 24;\n\n    const durationMap = {\n      [TimePassedType.Millisecond]: 1,\n      [TimePassedType.Second]: 1000,\n      [TimePassedType.Minute]: minute,\n      [TimePassedType.Hour]: hour,\n      [TimePassedType.Day]: day,\n      [TimePassedType.Month]: day * 30,\n      [TimePassedType.Year]: day * 365\n    };\n\n    return Math.round(\n      Math.abs((dateOne.getTime() - dateTwo.getTime()) / durationMap[type])\n    );\n  }\n\n  transform(dateOne: Date, dateTwo?: Date, type?: TimePassedType): any {\n\n    if (!dateTwo) {\n      dateTwo = new Date();\n    }\n\n    return TimePassedPipe.timeDiff(\n      dateOne,\n      dateTwo,\n      type !== undefined ? type : TimePassedType.Minute\n    );\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {TimePassedPipe} from './time-passed.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TimePassedPipe],\n  exports: [TimePassedPipe]\n})\nexport class TimePassedModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'jpEnumKeyFormat'\n})\nexport class EnumKeyFormatPipe implements PipeTransform {\n\n  static defaultFormat(value: string) {\n    return value\n      .split(new RegExp('(?=[A-Z])'))\n      .join(' ');\n  }\n\n  transform(value: any, enumValue: any, formatFunction: Function = EnumKeyFormatPipe.defaultFormat): any {\n    return enumValue[value] ?\n      formatFunction(enumValue[value]) :\n      value;\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {EnumKeyFormatPipe} from './enum-key-format.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    EnumKeyFormatPipe\n  ],\n  exports: [\n    EnumKeyFormatPipe\n  ]\n})\nexport class EnumKeyFormatModule { }\n","/**\n * Courtesy of\n * https://blog.angularindepth.com/creatively-decouple-ngonchanges-fab95395cc6e\n */\n\nexport interface SimpleChange<T> {\n  firstChange: boolean;\n  previousValue: T;\n  currentValue: T;\n  isFirstChange: () => boolean;\n}\n\nexport function OnChange<T = any>(callback: (value: T, simpleChange?: SimpleChange<T>) => void) {\n  const cachedValueKey = Symbol();\n  const isFirstChangeKey = Symbol();\n  return (target: any, key: PropertyKey) => {\n    Object.defineProperty(target, key, {\n      set: function (value) {\n        /**\n         * Change status of \"isFirstChange\"\n         */\n        this[isFirstChangeKey] = this[isFirstChangeKey] === undefined;\n\n        /**\n         *  No operation if new value is same as old value\n         */\n        if (!this[isFirstChangeKey] && this[cachedValueKey] === value) {\n          return;\n        }\n\n        const oldValue = this[cachedValueKey];\n        this[cachedValueKey] = value;\n        const simpleChange: SimpleChange<T> = {\n          firstChange: this[isFirstChangeKey],\n          previousValue: oldValue,\n          currentValue: this[cachedValueKey],\n          isFirstChange: () => this[isFirstChangeKey],\n        };\n        callback.call(this, this[cachedValueKey], simpleChange);\n      },\n      get: function () {\n        return this[cachedValueKey];\n      }\n    });\n  };\n}\n"]}