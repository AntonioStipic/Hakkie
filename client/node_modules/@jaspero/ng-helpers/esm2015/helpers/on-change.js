/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Courtesy of
 * https://blog.angularindepth.com/creatively-decouple-ngonchanges-fab95395cc6e
 */
/**
 * @record
 * @template T
 */
export function SimpleChange() { }
if (false) {
    /** @type {?} */
    SimpleChange.prototype.firstChange;
    /** @type {?} */
    SimpleChange.prototype.previousValue;
    /** @type {?} */
    SimpleChange.prototype.currentValue;
    /** @type {?} */
    SimpleChange.prototype.isFirstChange;
}
/**
 * @template T
 * @param {?} callback
 * @return {?}
 */
export function OnChange(callback) {
    /** @type {?} */
    const cachedValueKey = Symbol();
    /** @type {?} */
    const isFirstChangeKey = Symbol();
    return (target, key) => {
        Object.defineProperty(target, key, {
            set: function (value) {
                /**
                 * Change status of "isFirstChange"
                 */
                this[isFirstChangeKey] = this[isFirstChangeKey] === undefined;
                /**
                 *  No operation if new value is same as old value
                 */
                if (!this[isFirstChangeKey] && this[cachedValueKey] === value) {
                    return;
                }
                /** @type {?} */
                const oldValue = this[cachedValueKey];
                this[cachedValueKey] = value;
                /** @type {?} */
                const simpleChange = {
                    firstChange: this[isFirstChangeKey],
                    previousValue: oldValue,
                    currentValue: this[cachedValueKey],
                    isFirstChange: () => this[isFirstChangeKey],
                };
                callback.call(this, this[cachedValueKey], simpleChange);
            },
            get: function () {
                return this[cachedValueKey];
            }
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib24tY2hhbmdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctaGVscGVycy9zcmMvaGVscGVycy9vbi1jaGFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0NBS0M7OztJQUpDLG1DQUFxQjs7SUFDckIscUNBQWlCOztJQUNqQixvQ0FBZ0I7O0lBQ2hCLHFDQUE2Qjs7Ozs7OztBQUcvQixNQUFNLFVBQVUsUUFBUSxDQUFVLFFBQTREOztVQUN0RixjQUFjLEdBQUcsTUFBTSxFQUFFOztVQUN6QixnQkFBZ0IsR0FBRyxNQUFNLEVBQUU7SUFDakMsT0FBTyxDQUFDLE1BQVcsRUFBRSxHQUFnQixFQUFFLEVBQUU7UUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLEdBQUcsRUFBRSxVQUFVLEtBQUs7Z0JBQ2xCOzttQkFFRztnQkFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxTQUFTLENBQUM7Z0JBRTlEOzttQkFFRztnQkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssRUFBRTtvQkFDN0QsT0FBTztpQkFDUjs7c0JBRUssUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7O3NCQUN2QixZQUFZLEdBQW9CO29CQUNwQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDO29CQUNuQyxhQUFhLEVBQUUsUUFBUTtvQkFDdkIsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUM7b0JBQ2xDLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7aUJBQzVDO2dCQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUMxRCxDQUFDO1lBQ0QsR0FBRyxFQUFFO2dCQUNILE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzlCLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3VydGVzeSBvZlxuICogaHR0cHM6Ly9ibG9nLmFuZ3VsYXJpbmRlcHRoLmNvbS9jcmVhdGl2ZWx5LWRlY291cGxlLW5nb25jaGFuZ2VzLWZhYjk1Mzk1Y2M2ZVxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltcGxlQ2hhbmdlPFQ+IHtcbiAgZmlyc3RDaGFuZ2U6IGJvb2xlYW47XG4gIHByZXZpb3VzVmFsdWU6IFQ7XG4gIGN1cnJlbnRWYWx1ZTogVDtcbiAgaXNGaXJzdENoYW5nZTogKCkgPT4gYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE9uQ2hhbmdlPFQgPSBhbnk+KGNhbGxiYWNrOiAodmFsdWU6IFQsIHNpbXBsZUNoYW5nZT86IFNpbXBsZUNoYW5nZTxUPikgPT4gdm9pZCkge1xuICBjb25zdCBjYWNoZWRWYWx1ZUtleSA9IFN5bWJvbCgpO1xuICBjb25zdCBpc0ZpcnN0Q2hhbmdlS2V5ID0gU3ltYm9sKCk7XG4gIHJldHVybiAodGFyZ2V0OiBhbnksIGtleTogUHJvcGVydHlLZXkpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGFuZ2Ugc3RhdHVzIG9mIFwiaXNGaXJzdENoYW5nZVwiXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzW2lzRmlyc3RDaGFuZ2VLZXldID0gdGhpc1tpc0ZpcnN0Q2hhbmdlS2V5XSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgTm8gb3BlcmF0aW9uIGlmIG5ldyB2YWx1ZSBpcyBzYW1lIGFzIG9sZCB2YWx1ZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCF0aGlzW2lzRmlyc3RDaGFuZ2VLZXldICYmIHRoaXNbY2FjaGVkVmFsdWVLZXldID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpc1tjYWNoZWRWYWx1ZUtleV07XG4gICAgICAgIHRoaXNbY2FjaGVkVmFsdWVLZXldID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHNpbXBsZUNoYW5nZTogU2ltcGxlQ2hhbmdlPFQ+ID0ge1xuICAgICAgICAgIGZpcnN0Q2hhbmdlOiB0aGlzW2lzRmlyc3RDaGFuZ2VLZXldLFxuICAgICAgICAgIHByZXZpb3VzVmFsdWU6IG9sZFZhbHVlLFxuICAgICAgICAgIGN1cnJlbnRWYWx1ZTogdGhpc1tjYWNoZWRWYWx1ZUtleV0sXG4gICAgICAgICAgaXNGaXJzdENoYW5nZTogKCkgPT4gdGhpc1tpc0ZpcnN0Q2hhbmdlS2V5XSxcbiAgICAgICAgfTtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCB0aGlzW2NhY2hlZFZhbHVlS2V5XSwgc2ltcGxlQ2hhbmdlKTtcbiAgICAgIH0sXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbY2FjaGVkVmFsdWVLZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuIl19