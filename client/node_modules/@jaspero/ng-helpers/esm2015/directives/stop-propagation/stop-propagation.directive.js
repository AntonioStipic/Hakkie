/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
/**
 * Used for preventing propagation on event calls event.stopPropagation())
 *
 * \@example
 * <div (jpStopPropagation)="doSomething()"></div>
 */
export class StopPropagationDirective {
    /**
     * @param {?} _renderer
     * @param {?} _el
     */
    constructor(_renderer, _el) {
        this._renderer = _renderer;
        this._el = _el;
        /**
         * Any valid html event
         */
        this.stopPropagationEventType = 'click';
        /**
         * Should preventDefault also be called
         */
        this.preventDefault = false;
        /**
         * Outputs the input event
         */
        this.jpStopPropagation = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._renderer.listen(this._el.nativeElement, this.stopPropagationEventType, event => {
            if (this.preventDefault) {
                event.preventDefault();
            }
            if (this.condition !== undefined) {
                if (typeof this.condition === 'boolean') {
                    if (this.condition) {
                        this.sp(event);
                    }
                }
                else if (this.condition(event)) {
                    this.sp(event);
                }
            }
            else {
                this.sp(event);
            }
        });
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    sp(event) {
        event.stopPropagation();
        this.jpStopPropagation.emit(event);
    }
}
StopPropagationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[jpStopPropagation]'
            },] }
];
/** @nocollapse */
StopPropagationDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
StopPropagationDirective.propDecorators = {
    stopPropagationEventType: [{ type: Input }],
    preventDefault: [{ type: Input }],
    condition: [{ type: Input }],
    jpStopPropagation: [{ type: Output }]
};
if (false) {
    /**
     * Any valid html event
     * @type {?}
     */
    StopPropagationDirective.prototype.stopPropagationEventType;
    /**
     * Should preventDefault also be called
     * @type {?}
     */
    StopPropagationDirective.prototype.preventDefault;
    /** @type {?} */
    StopPropagationDirective.prototype.condition;
    /**
     * Outputs the input event
     * @type {?}
     */
    StopPropagationDirective.prototype.jpStopPropagation;
    /**
     * @type {?}
     * @private
     */
    StopPropagationDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    StopPropagationDirective.prototype._el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcC1wcm9wYWdhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1oZWxwZXJzL3NyYy9kaXJlY3RpdmVzL3N0b3AtcHJvcGFnYXRpb24vc3RvcC1wcm9wYWdhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQVdwRyxNQUFNLE9BQU8sd0JBQXdCOzs7OztJQUNuQyxZQUFvQixTQUFvQixFQUFVLEdBQWU7UUFBN0MsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQVk7Ozs7UUFLeEQsNkJBQXdCLEdBQUcsT0FBTyxDQUFDOzs7O1FBS25DLG1CQUFjLEdBQUcsS0FBSyxDQUFDOzs7O1FBT3RCLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFqQm1CLENBQUM7Ozs7SUFtQnJFLFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQ3RCLElBQUksQ0FBQyx3QkFBd0IsRUFDN0IsS0FBSyxDQUFDLEVBQUU7WUFDTixJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3ZCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN4QjtZQUVELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hDLElBQUksT0FBTyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtvQkFDdkMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO3dCQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNoQjtpQkFDRjtxQkFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2hCO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQjtRQUNILENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7Ozs7O0lBRU8sRUFBRSxDQUFDLEtBQUs7UUFDZCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7WUFsREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7YUFDaEM7Ozs7WUFWbUUsU0FBUztZQUExRCxVQUFVOzs7dUNBaUIxQixLQUFLOzZCQUtMLEtBQUs7d0JBRUwsS0FBSztnQ0FLTCxNQUFNOzs7Ozs7O0lBWlAsNERBQTRDOzs7OztJQUs1QyxrREFBZ0M7O0lBRWhDLDZDQUErRDs7Ozs7SUFLL0QscURBQWlEOzs7OztJQWpCckMsNkNBQTRCOzs7OztJQUFFLHVDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBVc2VkIGZvciBwcmV2ZW50aW5nIHByb3BhZ2F0aW9uIG9uIGV2ZW50IGNhbGxzIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpKVxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IChqcFN0b3BQcm9wYWdhdGlvbik9XCJkb1NvbWV0aGluZygpXCI+PC9kaXY+XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tqcFN0b3BQcm9wYWdhdGlvbl0nXG59KVxuZXhwb3J0IGNsYXNzIFN0b3BQcm9wYWdhdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmKSB7fVxuXG4gIC8qKlxuICAgKiBBbnkgdmFsaWQgaHRtbCBldmVudFxuICAgKi9cbiAgQElucHV0KCkgc3RvcFByb3BhZ2F0aW9uRXZlbnRUeXBlID0gJ2NsaWNrJztcblxuICAvKipcbiAgICogU2hvdWxkIHByZXZlbnREZWZhdWx0IGFsc28gYmUgY2FsbGVkXG4gICAqL1xuICBASW5wdXQoKSBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGNvbmRpdGlvbjogYm9vbGVhbiB8ICgoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IGJvb2xlYW4pO1xuXG4gIC8qKlxuICAgKiBPdXRwdXRzIHRoZSBpbnB1dCBldmVudFxuICAgKi9cbiAgQE91dHB1dCgpIGpwU3RvcFByb3BhZ2F0aW9uID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLmxpc3RlbihcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbkV2ZW50VHlwZSxcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29uZGl0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbikge1xuICAgICAgICAgICAgICB0aGlzLnNwKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29uZGl0aW9uKGV2ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5zcChldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3AoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3AoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmpwU3RvcFByb3BhZ2F0aW9uLmVtaXQoZXZlbnQpO1xuICB9XG59XG4iXX0=