/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Output } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime, filter } from 'rxjs/operators';
import { DEBOUNCE_TIME } from './debounce-time.const';
export class DebounceChangeDirective {
    /**
     * @param {?} _el
     * @param {?} _ngZone
     * @param {?} _defaultDebounceTime
     */
    constructor(_el, _ngZone, _defaultDebounceTime) {
        this._el = _el;
        this._ngZone = _ngZone;
        this._defaultDebounceTime = _defaultDebounceTime;
        /**
         * Any valid html event
         */
        this.debounceChangeEventType = 'keyup';
        /**
         * If true and the event has a 'target.value'
         * we listen for it and only emit if the value changed
         */
        this.emitOnlyOnChange = false;
        /**
         * Emits original event after debounce
         */
        this.jpDebounceChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._ngZone.runOutsideAngular(() => {
            /** @type {?} */
            let prev = this._el.nativeElement.value;
            this.subscription = fromEvent(this._el.nativeElement, this.debounceChangeEventType)
                .pipe(debounceTime(this.debounceTime || this._defaultDebounceTime), filter(event => {
                return event.target &&
                    event.target.value !== undefined &&
                    this.emitOnlyOnChange ?
                    event.target.value !== prev :
                    true;
            }))
                .subscribe(event => {
                this._ngZone.run(() => {
                    if (event.target) {
                        prev = event.target.value;
                    }
                    this.jpDebounceChange.emit(event.target.value);
                });
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
DebounceChangeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[jpDebounceChange]'
            },] }
];
/** @nocollapse */
DebounceChangeDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Number, decorators: [{ type: Inject, args: [DEBOUNCE_TIME,] }] }
];
DebounceChangeDirective.propDecorators = {
    debounceTime: [{ type: Input }],
    debounceChangeEventType: [{ type: Input }],
    emitOnlyOnChange: [{ type: Input }],
    jpDebounceChange: [{ type: Output }]
};
if (false) {
    /**
     * time to forward to the debounceTime pipe
     * @type {?}
     */
    DebounceChangeDirective.prototype.debounceTime;
    /**
     * Any valid html event
     * @type {?}
     */
    DebounceChangeDirective.prototype.debounceChangeEventType;
    /**
     * If true and the event has a 'target.value'
     * we listen for it and only emit if the value changed
     * @type {?}
     */
    DebounceChangeDirective.prototype.emitOnlyOnChange;
    /**
     * Emits original event after debounce
     * @type {?}
     */
    DebounceChangeDirective.prototype.jpDebounceChange;
    /** @type {?} */
    DebounceChangeDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    DebounceChangeDirective.prototype._el;
    /**
     * @type {?}
     * @private
     */
    DebounceChangeDirective.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    DebounceChangeDirective.prototype._defaultDebounceTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVib3VuY2UtY2hhbmdlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWhlbHBlcnMvc3JjL2RpcmVjdGl2ZXMvZGVib3VuY2UtY2hhbmdlL2RlYm91bmNlLWNoYW5nZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWEsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNILE9BQU8sRUFBQyxTQUFTLEVBQWUsTUFBTSxNQUFNLENBQUM7QUFDN0MsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFLcEQsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7O0lBQ2xDLFlBQ1UsR0FBZSxFQUNmLE9BQWUsRUFDUSxvQkFBNEI7UUFGbkQsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUNmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDUSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQVE7Ozs7UUFXcEQsNEJBQXVCLEdBQUcsT0FBTyxDQUFDOzs7OztRQU1sQyxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7Ozs7UUFLeEIscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQXJCckQsQ0FBQzs7OztJQXlCSixlQUFlO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7O2dCQUU5QixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSztZQUV2QyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBTSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUM7aUJBQ3JGLElBQUksQ0FDSCxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFDNUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNiLE9BQU8sS0FBSyxDQUFDLE1BQU07b0JBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLFNBQVM7b0JBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUNyQixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDO1lBQ1gsQ0FBQyxDQUFDLENBQ0g7aUJBQ0EsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7b0JBQ3BCLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTt3QkFDaEIsSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO3FCQUMzQjtvQkFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pELENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOzs7WUFqRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7YUFDL0I7Ozs7WUFQaUMsVUFBVTtZQUErQixNQUFNO3lDQVk1RSxNQUFNLFNBQUMsYUFBYTs7OzJCQU10QixLQUFLO3NDQUtMLEtBQUs7K0JBTUwsS0FBSzsrQkFLTCxNQUFNOzs7Ozs7O0lBaEJQLCtDQUFzQjs7Ozs7SUFLdEIsMERBQTJDOzs7Ozs7SUFNM0MsbURBQWtDOzs7OztJQUtsQyxtREFBd0Q7O0lBRXhELCtDQUEyQjs7Ozs7SUExQnpCLHNDQUF1Qjs7Ozs7SUFDdkIsMENBQXVCOzs7OztJQUN2Qix1REFBMkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIElucHV0LCBOZ1pvbmUsIE9uRGVzdHJveSwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7ZnJvbUV2ZW50LCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWJvdW5jZVRpbWUsIGZpbHRlcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtERUJPVU5DRV9USU1FfSBmcm9tICcuL2RlYm91bmNlLXRpbWUuY29uc3QnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbanBEZWJvdW5jZUNoYW5nZV0nXG59KVxuZXhwb3J0IGNsYXNzIERlYm91bmNlQ2hhbmdlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUsXG4gICAgQEluamVjdChERUJPVU5DRV9USU1FKSBwcml2YXRlIF9kZWZhdWx0RGVib3VuY2VUaW1lOiBudW1iZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiB0aW1lIHRvIGZvcndhcmQgdG8gdGhlIGRlYm91bmNlVGltZSBwaXBlXG4gICAqL1xuICBASW5wdXQoKSBkZWJvdW5jZVRpbWU7XG5cbiAgLyoqXG4gICAqIEFueSB2YWxpZCBodG1sIGV2ZW50XG4gICAqL1xuICBASW5wdXQoKSBkZWJvdW5jZUNoYW5nZUV2ZW50VHlwZSA9ICdrZXl1cCc7XG5cbiAgLyoqXG4gICAqIElmIHRydWUgYW5kIHRoZSBldmVudCBoYXMgYSAndGFyZ2V0LnZhbHVlJ1xuICAgKiB3ZSBsaXN0ZW4gZm9yIGl0IGFuZCBvbmx5IGVtaXQgaWYgdGhlIHZhbHVlIGNoYW5nZWRcbiAgICovXG4gIEBJbnB1dCgpIGVtaXRPbmx5T25DaGFuZ2UgPSBmYWxzZTtcblxuICAvKipcbiAgICogRW1pdHMgb3JpZ2luYWwgZXZlbnQgYWZ0ZXIgZGVib3VuY2VcbiAgICovXG4gIEBPdXRwdXQoKSBqcERlYm91bmNlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cbiAgICAgIGxldCBwcmV2ID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC52YWx1ZTtcblxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBmcm9tRXZlbnQ8YW55Pih0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmRlYm91bmNlQ2hhbmdlRXZlbnRUeXBlKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZVRpbWUgfHwgdGhpcy5fZGVmYXVsdERlYm91bmNlVGltZSksXG4gICAgICAgICAgZmlsdGVyKGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHJldHVybiBldmVudC50YXJnZXQgJiZcbiAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgdGhpcy5lbWl0T25seU9uQ2hhbmdlID9cbiAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUgIT09IHByZXYgOlxuICAgICAgICAgICAgICAgIHRydWU7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgcHJldiA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5qcERlYm91bmNlQ2hhbmdlLmVtaXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=