/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, Input, Renderer2 } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { LOAD_CLICK_CLASS } from './load-click-class.const';
/**
 * Directive will add loading class to the host element on click event
 * Usage: [jpLoadClick]="save()"
 * Function save() should return observable
 */
export class LoadClickDirective {
    /**
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} _defaultLoadClickClass
     */
    constructor(_el, _renderer, _defaultLoadClickClass) {
        this._el = _el;
        this._renderer = _renderer;
        this._defaultLoadClickClass = _defaultLoadClickClass;
        this.loadClickEventType = 'click';
        this.loadClickStopPropagation = false;
        this.loadClickPreventDefault = false;
        this.disableAttribute = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._renderer.listen(this._el.nativeElement, this.loadClickEventType, event => {
            /** @type {?} */
            const defaultClass = this.loadClickClass || this._defaultLoadClickClass;
            if (this.loadClickStopPropagation) {
                event.stopPropagation();
            }
            if (this.loadClickPreventDefault) {
                event.preventDefault();
            }
            this._renderer.addClass(this._el.nativeElement, defaultClass);
            if (this.disableAttribute) {
                this._renderer.setAttribute(this._el.nativeElement, 'disabled', '');
            }
            this.subscription = this.jpLoadClick()
                .pipe(finalize(() => {
                this._renderer.removeClass(this._el.nativeElement, defaultClass);
                if (this.disableAttribute) {
                    this._renderer.removeAttribute(this._el.nativeElement, 'disabled');
                }
            }))
                .subscribe();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
LoadClickDirective.decorators = [
    { type: Directive, args: [{ selector: '[jpLoadClick]' },] }
];
/** @nocollapse */
LoadClickDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: String, decorators: [{ type: Inject, args: [LOAD_CLICK_CLASS,] }] }
];
LoadClickDirective.propDecorators = {
    jpLoadClick: [{ type: Input }],
    loadClickEventType: [{ type: Input }],
    loadClickStopPropagation: [{ type: Input }],
    loadClickPreventDefault: [{ type: Input }],
    loadClickClass: [{ type: Input }],
    disableAttribute: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LoadClickDirective.prototype.jpLoadClick;
    /** @type {?} */
    LoadClickDirective.prototype.loadClickEventType;
    /** @type {?} */
    LoadClickDirective.prototype.loadClickStopPropagation;
    /** @type {?} */
    LoadClickDirective.prototype.loadClickPreventDefault;
    /** @type {?} */
    LoadClickDirective.prototype.loadClickClass;
    /** @type {?} */
    LoadClickDirective.prototype.disableAttribute;
    /** @type {?} */
    LoadClickDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    LoadClickDirective.prototype._el;
    /**
     * @type {?}
     * @private
     */
    LoadClickDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    LoadClickDirective.prototype._defaultLoadClickClass;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1oZWxwZXJzL3NyYy9kaXJlY3RpdmVzL2xvYWQtY2xpY2svbG9hZC1jbGljay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQVMxRCxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7SUFDN0IsWUFDVSxHQUFlLEVBQ2YsU0FBb0IsRUFDTSxzQkFBOEI7UUFGeEQsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUNmLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDTSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQVE7UUFPbEUsdUJBQWtCLEdBQUcsT0FBTyxDQUFDO1FBRzdCLDZCQUF3QixHQUFHLEtBQUssQ0FBQztRQUdqQyw0QkFBdUIsR0FBRyxLQUFLLENBQUM7UUFNaEMscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBbEJyQixDQUFDOzs7O0lBc0JKLFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQ3RCLElBQUksQ0FBQyxrQkFBa0IsRUFDdkIsS0FBSyxDQUFDLEVBQUU7O2tCQUNBLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxzQkFBc0I7WUFFdkUsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUU7Z0JBQ2pDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUN6QjtZQUVELElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFO2dCQUNoQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDeEI7WUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUU5RCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUN0QixVQUFVLEVBQ1YsRUFBRSxDQUNILENBQUM7YUFDSDtZQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTtpQkFDbkMsSUFBSSxDQUNILFFBQVEsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBRWpFLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO29CQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztpQkFDcEU7WUFDSCxDQUFDLENBQUMsQ0FDSDtpQkFDQSxTQUFTLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOzs7WUF4RUYsU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLGVBQWUsRUFBQzs7OztZQVhuQixVQUFVO1lBQW9DLFNBQVM7eUNBZ0JyRSxNQUFNLFNBQUMsZ0JBQWdCOzs7MEJBR3pCLEtBQUs7aUNBR0wsS0FBSzt1Q0FHTCxLQUFLO3NDQUdMLEtBQUs7NkJBR0wsS0FBSzsrQkFHTCxLQUFLOzs7O0lBZk4seUNBQ21DOztJQUVuQyxnREFDNkI7O0lBRTdCLHNEQUNpQzs7SUFFakMscURBQ2dDOztJQUVoQyw0Q0FDdUI7O0lBRXZCLDhDQUN3Qjs7SUFFeEIsMENBQTJCOzs7OztJQXZCekIsaUNBQXVCOzs7OztJQUN2Qix1Q0FBNEI7Ozs7O0lBQzVCLG9EQUFnRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmluYWxpemV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7TE9BRF9DTElDS19DTEFTU30gZnJvbSAnLi9sb2FkLWNsaWNrLWNsYXNzLmNvbnN0JztcblxuLyoqXG4gKiBEaXJlY3RpdmUgd2lsbCBhZGQgbG9hZGluZyBjbGFzcyB0byB0aGUgaG9zdCBlbGVtZW50IG9uIGNsaWNrIGV2ZW50XG4gKiBVc2FnZTogW2pwTG9hZENsaWNrXT1cInNhdmUoKVwiXG4gKiBGdW5jdGlvbiBzYXZlKCkgc2hvdWxkIHJldHVybiBvYnNlcnZhYmxlXG4gKi9cblxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbanBMb2FkQ2xpY2tdJ30pXG5leHBvcnQgY2xhc3MgTG9hZENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9lbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIEBJbmplY3QoTE9BRF9DTElDS19DTEFTUykgcHJpdmF0ZSBfZGVmYXVsdExvYWRDbGlja0NsYXNzOiBzdHJpbmdcbiAgKSB7fVxuXG4gIEBJbnB1dCgpXG4gIGpwTG9hZENsaWNrOiAoKSA9PiBPYnNlcnZhYmxlPGFueT47XG5cbiAgQElucHV0KClcbiAgbG9hZENsaWNrRXZlbnRUeXBlID0gJ2NsaWNrJztcblxuICBASW5wdXQoKVxuICBsb2FkQ2xpY2tTdG9wUHJvcGFnYXRpb24gPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBsb2FkQ2xpY2tQcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIGxvYWRDbGlja0NsYXNzOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgZGlzYWJsZUF0dHJpYnV0ZSA9IHRydWU7XG5cbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIubGlzdGVuKFxuICAgICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudCxcbiAgICAgIHRoaXMubG9hZENsaWNrRXZlbnRUeXBlLFxuICAgICAgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBkZWZhdWx0Q2xhc3MgPSB0aGlzLmxvYWRDbGlja0NsYXNzIHx8IHRoaXMuX2RlZmF1bHRMb2FkQ2xpY2tDbGFzcztcblxuICAgICAgICBpZiAodGhpcy5sb2FkQ2xpY2tTdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmxvYWRDbGlja1ByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsIGRlZmF1bHRDbGFzcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZUF0dHJpYnV0ZSkge1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAnZGlzYWJsZWQnLFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmpwTG9hZENsaWNrKClcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWwubmF0aXZlRWxlbWVudCwgZGVmYXVsdENsYXNzKTtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgICAuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==