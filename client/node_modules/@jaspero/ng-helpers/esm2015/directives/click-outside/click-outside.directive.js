/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
import { fromEvent } from 'rxjs';
import { filter } from 'rxjs/operators';
/**
 * Emits an event when a click action occurs that does not target the element
 *
 * \@example
 * <div (jpClickOutside)="doSomething()"></div>
 */
export class ClickOutsideDirective {
    /**
     * @param {?} _el
     * @param {?} _ngZone
     */
    constructor(_el, _ngZone) {
        this._el = _el;
        this._ngZone = _ngZone;
        /**
         * Any valid html event
         */
        this.clickOutsideEventType = 'click';
        /**
         * if true jpClickOutside doesn't emit
         */
        this.clickOutsideBlock = false;
        /**
         * Emits when triggered event doesn't contain this e
         */
        this.jpClickOutside = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._ngZone.runOutsideAngular(() => {
            this.subscription = fromEvent(window, this.clickOutsideEventType)
                .pipe(filter(event => !this.clickOutsideBlock &&
                !this._el.nativeElement.contains(event.target)))
                .subscribe(event => {
                this._ngZone.run(() => {
                    this.jpClickOutside.emit(event);
                });
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ClickOutsideDirective.decorators = [
    { type: Directive, args: [{
                selector: '[jpClickOutside]'
            },] }
];
/** @nocollapse */
ClickOutsideDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
ClickOutsideDirective.propDecorators = {
    clickOutsideEventType: [{ type: Input }],
    clickOutsideBlock: [{ type: Input }],
    jpClickOutside: [{ type: Output }]
};
if (false) {
    /**
     * Any valid html event
     * @type {?}
     */
    ClickOutsideDirective.prototype.clickOutsideEventType;
    /**
     * if true jpClickOutside doesn't emit
     * @type {?}
     */
    ClickOutsideDirective.prototype.clickOutsideBlock;
    /**
     * Emits when triggered event doesn't contain this e
     * @type {?}
     */
    ClickOutsideDirective.prototype.jpClickOutside;
    /** @type {?} */
    ClickOutsideDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ClickOutsideDirective.prototype._el;
    /**
     * @type {?}
     * @private
     */
    ClickOutsideDirective.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2stb3V0c2lkZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1oZWxwZXJzL3NyYy9kaXJlY3RpdmVzL2NsaWNrLW91dHNpZGUvY2xpY2stb3V0c2lkZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBYSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkgsT0FBTyxFQUFDLFNBQVMsRUFBZSxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFXdEMsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7SUFDaEMsWUFBb0IsR0FBZSxFQUFVLE9BQWU7UUFBeEMsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVE7Ozs7UUFLbkQsMEJBQXFCLEdBQUcsT0FBTyxDQUFDOzs7O1FBS2hDLHNCQUFpQixHQUFHLEtBQUssQ0FBQzs7OztRQUt6QixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7SUFmSyxDQUFDOzs7O0lBbUJoRSxlQUFlO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQWEsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztpQkFDMUUsSUFBSSxDQUNILE1BQU0sQ0FDSixLQUFLLENBQUMsRUFBRSxDQUNOLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtnQkFDdkIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNqRCxDQUNGO2lCQUNBLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNwQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7OztZQVppQyxVQUFVO1lBQXVCLE1BQU07OztvQ0FtQnRFLEtBQUs7Z0NBS0wsS0FBSzs2QkFLTCxNQUFNOzs7Ozs7O0lBVlAsc0RBQXlDOzs7OztJQUt6QyxrREFBbUM7Ozs7O0lBS25DLCtDQUEwRDs7SUFFMUQsNkNBQTJCOzs7OztJQWpCZixvQ0FBdUI7Ozs7O0lBQUUsd0NBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE5nWm9uZSwgT25EZXN0cm95LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEVtaXRzIGFuIGV2ZW50IHdoZW4gYSBjbGljayBhY3Rpb24gb2NjdXJzIHRoYXQgZG9lcyBub3QgdGFyZ2V0IHRoZSBlbGVtZW50XG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXYgKGpwQ2xpY2tPdXRzaWRlKT1cImRvU29tZXRoaW5nKClcIj48L2Rpdj5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2pwQ2xpY2tPdXRzaWRlXSdcbn0pXG5leHBvcnQgY2xhc3MgQ2xpY2tPdXRzaWRlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgX25nWm9uZTogTmdab25lKSB7fVxuXG4gIC8qKlxuICAgKiBBbnkgdmFsaWQgaHRtbCBldmVudFxuICAgKi9cbiAgQElucHV0KCkgY2xpY2tPdXRzaWRlRXZlbnRUeXBlID0gJ2NsaWNrJztcblxuICAvKipcbiAgICogaWYgdHJ1ZSBqcENsaWNrT3V0c2lkZSBkb2Vzbid0IGVtaXRcbiAgICovXG4gIEBJbnB1dCgpIGNsaWNrT3V0c2lkZUJsb2NrID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEVtaXRzIHdoZW4gdHJpZ2dlcmVkIGV2ZW50IGRvZXNuJ3QgY29udGFpbiB0aGlzIGVcbiAgICovXG4gIEBPdXRwdXQoKSBqcENsaWNrT3V0c2lkZSA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcblxuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gZnJvbUV2ZW50PE1vdXNlRXZlbnQ+KHdpbmRvdywgdGhpcy5jbGlja091dHNpZGVFdmVudFR5cGUpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGZpbHRlcihcbiAgICAgICAgICAgIGV2ZW50ID0+XG4gICAgICAgICAgICAgICF0aGlzLmNsaWNrT3V0c2lkZUJsb2NrICYmXG4gICAgICAgICAgICAgICF0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmpwQ2xpY2tPdXRzaWRlLmVtaXQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==