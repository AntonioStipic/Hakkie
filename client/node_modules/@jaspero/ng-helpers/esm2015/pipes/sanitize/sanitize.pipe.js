/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
/**
 * Applies the appropriate DomSanitizer method
 * to inputted value.
 *
 * \@example
 * <div [innerHtml]="someHtmlValue | sanitize"></div>
 */
export class SanitizePipe {
    /**
     * @param {?} _sanitizer
     */
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} value
     * @param {?=} type
     * @return {?}
     */
    transform(value, type = 'html') {
        /** @type {?} */
        const sanitizeMap = {
            html: 'bypassSecurityTrustHtml',
            style: 'bypassSecurityTrustStyle',
            script: 'bypassSecurityTrustScript',
            url: 'bypassSecurityTrustUrl',
            resourceUrl: 'bypassSecurityTrustResourceUrl'
        };
        return this._sanitizer[sanitizeMap[type]](value);
    }
}
SanitizePipe.decorators = [
    { type: Pipe, args: [{
                name: 'jpSanitize'
            },] }
];
/** @nocollapse */
SanitizePipe.ctorParameters = () => [
    { type: DomSanitizer }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SanitizePipe.prototype._sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWhlbHBlcnMvc3JjL3BpcGVzL3Nhbml0aXplL3Nhbml0aXplLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7Ozs7QUFZdkQsTUFBTSxPQUFPLFlBQVk7Ozs7SUFDdkIsWUFDVSxVQUF3QjtRQUF4QixlQUFVLEdBQVYsVUFBVSxDQUFjO0lBQy9CLENBQUM7Ozs7OztJQUVKLFNBQVMsQ0FBQyxLQUFhLEVBQUUsSUFBSSxHQUFHLE1BQU07O2NBRTlCLFdBQVcsR0FBRztZQUNsQixJQUFJLEVBQUUseUJBQXlCO1lBQy9CLEtBQUssRUFBRSwwQkFBMEI7WUFDakMsTUFBTSxFQUFFLDJCQUEyQjtZQUNuQyxHQUFHLEVBQUUsd0JBQXdCO1lBQzdCLFdBQVcsRUFBRSxnQ0FBZ0M7U0FDOUM7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBbkJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsWUFBWTthQUNuQjs7OztZQVhPLFlBQVk7Ozs7Ozs7SUFjaEIsa0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RG9tU2FuaXRpemVyfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBhcHByb3ByaWF0ZSBEb21TYW5pdGl6ZXIgbWV0aG9kXG4gKiB0byBpbnB1dHRlZCB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdiBbaW5uZXJIdG1sXT1cInNvbWVIdG1sVmFsdWUgfCBzYW5pdGl6ZVwiPjwvZGl2PlxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdqcFNhbml0aXplJ1xufSlcbmV4cG9ydCBjbGFzcyBTYW5pdGl6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcbiAgKSB7fVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nLCB0eXBlID0gJ2h0bWwnKSB7XG5cbiAgICBjb25zdCBzYW5pdGl6ZU1hcCA9IHtcbiAgICAgIGh0bWw6ICdieXBhc3NTZWN1cml0eVRydXN0SHRtbCcsXG4gICAgICBzdHlsZTogJ2J5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZScsXG4gICAgICBzY3JpcHQ6ICdieXBhc3NTZWN1cml0eVRydXN0U2NyaXB0JyxcbiAgICAgIHVybDogJ2J5cGFzc1NlY3VyaXR5VHJ1c3RVcmwnLFxuICAgICAgcmVzb3VyY2VVcmw6ICdieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwnXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLl9zYW5pdGl6ZXJbc2FuaXRpemVNYXBbdHlwZV1dKHZhbHVlKTtcbiAgfVxufVxuIl19