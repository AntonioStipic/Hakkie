/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/** @enum {number} */
const TimePassedType = {
    Millisecond: 0,
    Second: 1,
    Minute: 2,
    Hour: 3,
    Day: 4,
    Month: 5,
    Year: 6,
};
export { TimePassedType };
TimePassedType[TimePassedType.Millisecond] = 'Millisecond';
TimePassedType[TimePassedType.Second] = 'Second';
TimePassedType[TimePassedType.Minute] = 'Minute';
TimePassedType[TimePassedType.Hour] = 'Hour';
TimePassedType[TimePassedType.Day] = 'Day';
TimePassedType[TimePassedType.Month] = 'Month';
TimePassedType[TimePassedType.Year] = 'Year';
export class TimePassedPipe {
    /**
     * @param {?} dateOne
     * @param {?=} dateTwo
     * @param {?=} type
     * @return {?}
     */
    static timeDiff(dateOne, dateTwo = new Date(), type = TimePassedType.Day) {
        /** @type {?} */
        const oneDay = 24 * 60 * 60 * 1000;
        /** @type {?} */
        const minute = 60 * 1000;
        /** @type {?} */
        const hour = 60 * minute;
        /** @type {?} */
        const day = hour * 24;
        /** @type {?} */
        const durationMap = {
            [TimePassedType.Millisecond]: 1,
            [TimePassedType.Second]: 1000,
            [TimePassedType.Minute]: minute,
            [TimePassedType.Hour]: hour,
            [TimePassedType.Day]: day,
            [TimePassedType.Month]: day * 30,
            [TimePassedType.Year]: day * 365
        };
        return Math.round(Math.abs((dateOne.getTime() - dateTwo.getTime()) / durationMap[type]));
    }
    /**
     * @param {?} dateOne
     * @param {?=} dateTwo
     * @param {?=} type
     * @return {?}
     */
    transform(dateOne, dateTwo, type) {
        if (!dateTwo) {
            dateTwo = new Date();
        }
        return TimePassedPipe.timeDiff(dateOne, dateTwo, type !== undefined ? type : TimePassedType.Minute);
    }
}
TimePassedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'jpTimePassed'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1wYXNzZWQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWhlbHBlcnMvc3JjL3BpcGVzL3RpbWUtcGFzc2VkL3RpbWUtcGFzc2VkLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOzs7SUFHbEQsY0FBVztJQUNYLFNBQU07SUFDTixTQUFNO0lBQ04sT0FBSTtJQUNKLE1BQUc7SUFDSCxRQUFLO0lBQ0wsT0FBSTs7Ozs7Ozs7OztBQU1OLE1BQU0sT0FBTyxjQUFjOzs7Ozs7O0lBRXpCLE1BQU0sQ0FBQyxRQUFRLENBQ2IsT0FBYSxFQUNiLFVBQWdCLElBQUksSUFBSSxFQUFFLEVBQzFCLElBQUksR0FBRyxjQUFjLENBQUMsR0FBRzs7Y0FFbkIsTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7O2NBRTVCLE1BQU0sR0FBRyxFQUFFLEdBQUcsSUFBSTs7Y0FDbEIsSUFBSSxHQUFHLEVBQUUsR0FBRyxNQUFNOztjQUNsQixHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUU7O2NBRWYsV0FBVyxHQUFHO1lBQ2xCLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDL0IsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSTtZQUM3QixDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNO1lBQy9CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUk7WUFDM0IsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRztZQUN6QixDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRTtZQUNoQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRztTQUNqQztRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FDZixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN0RSxDQUFDO0lBQ0osQ0FBQzs7Ozs7OztJQUVELFNBQVMsQ0FBQyxPQUFhLEVBQUUsT0FBYyxFQUFFLElBQXFCO1FBRTVELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztTQUN0QjtRQUVELE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FDNUIsT0FBTyxFQUNQLE9BQU8sRUFDUCxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQ2xELENBQUM7SUFDSixDQUFDOzs7WUExQ0YsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxjQUFjO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZW51bSBUaW1lUGFzc2VkVHlwZSB7XG4gIE1pbGxpc2Vjb25kLFxuICBTZWNvbmQsXG4gIE1pbnV0ZSxcbiAgSG91cixcbiAgRGF5LFxuICBNb250aCxcbiAgWWVhclxufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdqcFRpbWVQYXNzZWQnXG59KVxuZXhwb3J0IGNsYXNzIFRpbWVQYXNzZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgc3RhdGljIHRpbWVEaWZmKFxuICAgIGRhdGVPbmU6IERhdGUsXG4gICAgZGF0ZVR3bzogRGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgdHlwZSA9IFRpbWVQYXNzZWRUeXBlLkRheVxuICApIHtcbiAgICBjb25zdCBvbmVEYXkgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG4gICAgY29uc3QgbWludXRlID0gNjAgKiAxMDAwO1xuICAgIGNvbnN0IGhvdXIgPSA2MCAqIG1pbnV0ZTtcbiAgICBjb25zdCBkYXkgPSBob3VyICogMjQ7XG5cbiAgICBjb25zdCBkdXJhdGlvbk1hcCA9IHtcbiAgICAgIFtUaW1lUGFzc2VkVHlwZS5NaWxsaXNlY29uZF06IDEsXG4gICAgICBbVGltZVBhc3NlZFR5cGUuU2Vjb25kXTogMTAwMCxcbiAgICAgIFtUaW1lUGFzc2VkVHlwZS5NaW51dGVdOiBtaW51dGUsXG4gICAgICBbVGltZVBhc3NlZFR5cGUuSG91cl06IGhvdXIsXG4gICAgICBbVGltZVBhc3NlZFR5cGUuRGF5XTogZGF5LFxuICAgICAgW1RpbWVQYXNzZWRUeXBlLk1vbnRoXTogZGF5ICogMzAsXG4gICAgICBbVGltZVBhc3NlZFR5cGUuWWVhcl06IGRheSAqIDM2NVxuICAgIH07XG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZChcbiAgICAgIE1hdGguYWJzKChkYXRlT25lLmdldFRpbWUoKSAtIGRhdGVUd28uZ2V0VGltZSgpKSAvIGR1cmF0aW9uTWFwW3R5cGVdKVxuICAgICk7XG4gIH1cblxuICB0cmFuc2Zvcm0oZGF0ZU9uZTogRGF0ZSwgZGF0ZVR3bz86IERhdGUsIHR5cGU/OiBUaW1lUGFzc2VkVHlwZSk6IGFueSB7XG5cbiAgICBpZiAoIWRhdGVUd28pIHtcbiAgICAgIGRhdGVUd28gPSBuZXcgRGF0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBUaW1lUGFzc2VkUGlwZS50aW1lRGlmZihcbiAgICAgIGRhdGVPbmUsXG4gICAgICBkYXRlVHdvLFxuICAgICAgdHlwZSAhPT0gdW5kZWZpbmVkID8gdHlwZSA6IFRpbWVQYXNzZWRUeXBlLk1pbnV0ZVxuICAgICk7XG4gIH1cblxufVxuIl19