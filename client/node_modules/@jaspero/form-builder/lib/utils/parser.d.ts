import { Injector } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { SchemaType } from '../enums/schema-type.enum';
import { State } from '../enums/state.enum';
import { CompiledField } from '../interfaces/compiled-field.interface';
import { Control } from '../interfaces/control.type';
import { Definitions } from '../interfaces/definitions.interface';
import { CustomFields } from './custom-fields';
export interface PropertyDefinition {
    type: SchemaType;
    description?: string;
    default?: any;
}
export interface StringPropertyDefinition extends PropertyDefinition {
    type: SchemaType.String;
    default?: string;
    pattern?: string;
    minLength?: number;
    maxLength?: number;
}
export interface NumberPropertyDefinition extends PropertyDefinition {
    type: SchemaType.Number | SchemaType.Integer;
    default?: number;
    minimum?: number;
    maximum?: number;
    exclusiveMinimum?: boolean;
    exclusiveMaximum?: boolean;
    multipleOf?: number;
}
export interface BooleanPropertyDefinition extends PropertyDefinition {
    type: SchemaType.Boolean;
    default?: boolean;
}
export interface ArrayPropertyDefinition extends PropertyDefinition {
    type: SchemaType.Array;
    items?: any;
    contains?: any;
}
export interface Pointer {
    key: string;
    type: SchemaType;
    control: Control;
    validation: any;
    formatOnSave?: (item: any, dataSet?: any) => any;
    formatOnLoad?: (item: any) => any;
    formatOnCreate?: (item: any, dataSet?: any) => any;
    formatOnEdit?: (item: any, dataSet?: any) => any;
    /**
     * Arrays can have these properties
     */
    arrayType?: SchemaType;
    properties?: any;
    required?: string[];
    arrayPointers?: Pointers[];
}
export interface Pointers {
    [key: string]: Pointer;
}
export declare class Parser {
    schema: any;
    injector: Injector;
    state: State;
    role: string;
    definitions: Definitions;
    customFields: CustomFields;
    constructor(schema: any, injector: Injector, state: State, role: string, definitions?: Definitions, customFields?: CustomFields);
    form: FormGroup;
    pointers: Pointers;
    static standardizeKey(key: string): string;
    static stringControl(definition: StringPropertyDefinition, required: boolean): {
        control: FormControl;
        validation: any;
    };
    static numberControl(definition: NumberPropertyDefinition, required: boolean): {
        control: FormControl;
        validation: any;
    };
    static booleanControl(definition: BooleanPropertyDefinition, required: boolean): {
        control: FormControl;
        validation: any;
    };
    buildForm(value?: any, required?: string[], base?: string, addId?: boolean): FormGroup;
    buildProperties(properties: object, required?: string[], base?: string, addId?: boolean): {
        pointers: {};
        form: FormGroup;
    };
    /**
     * @param pointerKey Lookup key for the pointer
     * @param pointer Entire pointer object that should be used
     * @param definitions Entire definitions object that should be used
     * @param single Defines if the field shown in the form or in the table
     * @param arrayRoot If the field is in an array what root lookup to use
     */
    field(pointerKey: string, pointer: Pointer, definitions?: Definitions, single?: boolean, arrayRoot?: string): CompiledField;
    addArrayItem(pointer: string, loadHooks?: boolean, parentArray?: {
        index: number;
        pointer: string;
    }): {};
    moveArrayItem(pointer: string, fromIndex: number, toIndex: number, parentArray?: {
        index: number;
        pointer: string;
    }): void;
    removeArrayItem(pointer: string, index: number, parentArray?: {
        index: number;
        pointer: string;
    }): void;
    loadHooks(pointers?: Pointers): void;
    preSaveHooks(currentState: State, statesToProcess?: State[], pointers?: Pointers): void;
    getFromDefinitions(key: string, definitions?: Definitions): import("../interfaces/definitions.interface").Definition;
    /**
     * TODO:
     * - Handle contains case
     * - Handle items or contains as array not object
     */
    private buildArray;
}
