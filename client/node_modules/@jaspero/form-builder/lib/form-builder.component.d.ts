import { ChangeDetectorRef, EventEmitter, Injector, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { State } from './enums/state.enum';
import { FormBuilderService } from './form-builder.service';
import { CompiledSegment } from './interfaces/compiled-segment.interface';
import { FormBuilderData } from './interfaces/form-builder-data.interface';
import { CustomFields } from './utils/custom-fields';
import { Parser } from './utils/parser';
import * as ɵngcc0 from '@angular/core';
export declare class FormBuilderComponent implements OnChanges, OnDestroy {
    private injector;
    private role;
    private customFields;
    private cdr;
    private service;
    constructor(injector: Injector, role: string, customFields: CustomFields, cdr: ChangeDetectorRef, service: FormBuilderService);
    data: FormBuilderData;
    value: any;
    id: string;
    valueChanges: EventEmitter<any>;
    validityChanges: EventEmitter<boolean>;
    form: FormGroup;
    parser: Parser;
    segments: CompiledSegment[];
    state: State;
    private changeSubscription;
    private statusSubscription;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    process(): any;
    save(collectionId: string, documentId: string): import("rxjs").Observable<{}>;
    saveAndProcess(collectionId: string, documentId: string): import("rxjs").Observable<{}>;
    private render;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormBuilderComponent, [null, { optional: true; }, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormBuilderComponent, "fb-form-builder", never, { "state": "state"; "data": "data"; "value": "value"; "id": "id"; }, { "valueChanges": "valueChanges"; "validityChanges": "validityChanges"; }, never, never>;
}

//# sourceMappingURL=form-builder.component.d.ts.map