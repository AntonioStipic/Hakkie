{"version":3,"file":"select.component.d.ts","sources":["select.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { OnInit } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { FieldComponent } from '../../field/field.component';\nimport { FieldData } from '../../interfaces/field-data.interface';\nimport { Option } from '../../interfaces/option.interface';\nimport { WhereFilter } from '../../interfaces/where-filter.interface';\nimport { DbService } from '../../services/db.service';\ninterface Populate {\n    collection?: string;\n    nameKey?: string;\n    valueKey?: string;\n    orderBy?: string;\n    /**\n     * A method for mapping all of the results\n     * (items: T[]) => any[]\n     */\n    mapResults?: string;\n    /**\n     * If a filter is a string\n     * it represents the id of the document\n     */\n    filter?: WhereFilter | string;\n    /**\n     * A stringified function that receives\n     * an object with {fieldData: SelectData, value: form.getRawValue(), role: string, additionalContext?: any}\n     * and should return a WhereFilter.\n     * This doesn't work in combination with the dependency property\n     */\n    dynamicFilter?: string;\n    /**\n     * Use this property if the field depends on changes\n     * of a different field in the form\n     */\n    dependency?: {\n        key: string;\n        /**\n         * A method for defining query dynamically\n         * (value) => {collection: string; orderBy: string; filter: WhereFilter | string}\n         */\n        method: string;\n    };\n}\ninterface SelectData extends FieldData {\n    dataSet?: Option[];\n    multiple?: boolean;\n    populate?: Populate;\n    autocomplete?: string;\n}\nexport declare class SelectComponent extends FieldComponent<SelectData> implements OnInit {\n    cData: SelectData;\n    private dbService;\n    private role;\n    private additionalContext;\n    dataSet$: Observable<Option[]>;\n    loading$: BehaviorSubject<boolean>;\n    constructor(cData: SelectData, dbService: DbService, role: string, additionalContext: any);\n    ngOnInit(): void;\n}\nexport {};\n"]}