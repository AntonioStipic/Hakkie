import { CdkDragDrop, CdkDragMove, CdkDropList, CdkDropListGroup } from '@angular/cdk/drag-drop';
import { ViewportRuler } from '@angular/cdk/overlay';
import { HttpClient } from '@angular/common/http';
import { AfterViewInit, ChangeDetectorRef, ElementRef, OnInit, TemplateRef } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TranslocoService } from '@ngneat/transloco';
import { FieldComponent } from '../../field/field.component';
import { FormBuilderService } from '../../form-builder.service';
import { FieldData } from '../../interfaces/field-data.interface';
import { GeneratedImage } from '../../interfaces/generated-image.interface';
import { StorageService } from '../../services/storage.service';
interface GalleryData extends FieldData {
    allowUrl?: boolean;
    allowServerUpload?: boolean;
    generatedImages?: GeneratedImage[];
    allowedImageTypes?: string[];
    forbiddenImageTypes?: string[];
    minSize?: string | number;
    maxSize?: string | number;
}
export declare class GalleryComponent extends FieldComponent<GalleryData> implements OnInit, AfterViewInit {
    cData: GalleryData;
    private storageUrl;
    private dialog;
    private cdr;
    private http;
    private storage;
    private formBuilderService;
    private viewportRuler;
    private transloco;
    private snackBar;
    constructor(cData: GalleryData, storageUrl: string, dialog: MatDialog, cdr: ChangeDetectorRef, http: HttpClient, storage: StorageService, formBuilderService: FormBuilderService, viewportRuler: ViewportRuler, transloco: TranslocoService, snackBar: MatSnackBar);
    listGroup: CdkDropListGroup<CdkDropList>;
    placeholder: CdkDropList;
    modalTemplate: TemplateRef<any>;
    imagesSort: TemplateRef<any>;
    fileEl: ElementRef<HTMLInputElement>;
    target: CdkDropList | null;
    targetIndex: number;
    source: CdkDropList | null;
    sourceIndex: number;
    activeContainer: any;
    files: File[];
    toRemove: any[];
    allowedImageTypes: string[];
    forbiddenImageTypes: string[];
    minSizeBytes: number;
    maxSizeBytes: number;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    openUploadDialog(): void;
    addImage(image: string): void;
    openFileUpload(): void;
    openSortImages(): void;
    drop(event: CdkDragDrop<string[]>): void;
    move(up: boolean | undefined, index: number): void;
    errorSnack(message?: string, dismiss?: string): void;
    filesUploaded(el: HTMLInputElement | FileList): import("rxjs").Observable<never> | undefined;
    removeImage(index: number, item: any): void;
    sortDrop(event: CdkDragDrop<string[]>): void;
    /**
     * Drag and Drop
     */
    dragMoved(e: CdkDragMove): void;
    dropListDropped(): void;
    /** Determines the point of the page that was touched by the user. */
    getPointerPositionOnPage(event: MouseEvent | TouchEvent): {
        x: number;
        y: number;
    };
    /**
     * Executes all uploads/removes to persist
     * the changes on server
     */
    save(moduleId: string, documentId: string): import("rxjs").Observable<unknown[]>;
}
export {};
