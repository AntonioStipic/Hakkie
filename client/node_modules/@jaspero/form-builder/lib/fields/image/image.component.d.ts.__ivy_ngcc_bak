import { ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { TranslocoService } from '@ngneat/transloco';
import { FieldComponent } from '../../field/field.component';
import { FormBuilderService } from '../../form-builder.service';
import { FieldData } from '../../interfaces/field-data.interface';
import { GeneratedImage } from '../../interfaces/generated-image.interface';
import { StorageService } from '../../services/storage.service';
interface ImageData extends FieldData {
    preventServerUpload?: boolean;
    generatedImages?: GeneratedImage[];
    allowedImageTypes?: string[];
    forbiddenImageTypes?: string[];
    minSize?: string | number;
    maxSize?: string | number;
}
export declare class ImageComponent extends FieldComponent<ImageData> implements OnInit {
    cData: ImageData;
    private storage;
    private cdr;
    private formBuilderService;
    private transloco;
    private snackBar;
    private domSanitizer;
    constructor(cData: ImageData, storage: StorageService, cdr: ChangeDetectorRef, formBuilderService: FormBuilderService, transloco: TranslocoService, snackBar: MatSnackBar, domSanitizer: DomSanitizer);
    fileEl: ElementRef<HTMLInputElement>;
    value: File | null;
    imageUrl: FormControl;
    disInput: boolean;
    imageSrc: SafeResourceUrl;
    allowedImageTypes: string[];
    forbiddenImageTypes: string[];
    minSizeBytes: number;
    maxSizeBytes: number;
    ngOnInit(): void;
    errorSnack(message?: string, dismiss?: string): void;
    openFileUpload(): void;
    filesImage(event: Event): import("rxjs").Observable<never> | undefined;
    remove(): void;
    save(moduleId: string, documentId: string): import("rxjs").Observable<any>;
}
export {};
