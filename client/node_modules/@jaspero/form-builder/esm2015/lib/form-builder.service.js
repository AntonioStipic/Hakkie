import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TranslocoService } from '@ngneat/transloco';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
export class FormBuilderService {
    constructor(transloco, snackBar) {
        this.transloco = transloco;
        this.snackBar = snackBar;
        /**
         * Array of components that need to
         * run save() methods on single instance
         */
        this.saveComponents = [];
    }
    notify(options = {}) {
        const finalOptions = Object.assign({ success: 'GENERAL.OPERATION_COMPLETED', error: 'GENERAL.OPERATION_FAILED' }, options);
        return (source$) => {
            return source$.pipe(tap(() => {
                if (finalOptions.success) {
                    this.snackBar.open(this.transloco.translate(finalOptions.success), this.transloco.translate('GENERAL.DISMISS'), {
                        duration: 5000
                    });
                }
            }), catchError(err => {
                if (finalOptions.error) {
                    this.snackBar.open(this.transloco.translate(finalOptions.error), this.transloco.translate('GENERAL.DISMISS'), {
                        panelClass: 'snack-bar-error',
                        duration: 5000
                    });
                }
                console.error(err);
                return throwError(err);
            }));
        };
    }
}
FormBuilderService.decorators = [
    { type: Injectable }
];
FormBuilderService.ctorParameters = () => [
    { type: TranslocoService },
    { type: MatSnackBar }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1idWlsZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb3JtLWJ1aWxkZXIvc3JjL2xpYi9mb3JtLWJ1aWxkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQWEsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHL0MsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixZQUNVLFNBQTJCLEVBQzNCLFFBQXFCO1FBRHJCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFJL0I7OztXQUdHO1FBQ0gsbUJBQWMsR0FBVSxFQUFFLENBQUM7SUFOM0IsQ0FBQztJQVFELE1BQU0sQ0FDSixVQUdJLEVBQUU7UUFFTixNQUFNLFlBQVksbUJBQ2hCLE9BQU8sRUFBRSw2QkFBNkIsRUFDdEMsS0FBSyxFQUFFLDBCQUEwQixJQUM5QixPQUFPLENBQ1gsQ0FBQztRQUVGLE9BQU8sQ0FBSSxPQUFzQixFQUFFLEVBQUU7WUFDbkMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNQLElBQUksWUFBWSxDQUFDLE9BQU8sRUFBRTtvQkFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFDOUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsRUFDM0M7d0JBQ0UsUUFBUSxFQUFFLElBQUk7cUJBQ2YsQ0FDRixDQUFDO2lCQUNIO1lBQ0gsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRTtvQkFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFDNUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsRUFDM0M7d0JBQ0UsVUFBVSxFQUFFLGlCQUFpQjt3QkFDN0IsUUFBUSxFQUFFLElBQUk7cUJBQ2YsQ0FDRixDQUFDO2lCQUNIO2dCQUVELE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUM7SUFDSixDQUFDOzs7WUF4REYsVUFBVTs7O1lBSkgsZ0JBQWdCO1lBRGhCLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNYXRTbmFja0Jhcn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7VHJhbnNsb2NvU2VydmljZX0gZnJvbSAnQG5nbmVhdC90cmFuc2xvY28nO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aHJvd0Vycm9yfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Y2F0Y2hFcnJvciwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGb3JtQnVpbGRlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRyYW5zbG9jbzogVHJhbnNsb2NvU2VydmljZSxcbiAgICBwcml2YXRlIHNuYWNrQmFyOiBNYXRTbmFja0JhclxuICApIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBjb21wb25lbnRzIHRoYXQgbmVlZCB0b1xuICAgKiBydW4gc2F2ZSgpIG1ldGhvZHMgb24gc2luZ2xlIGluc3RhbmNlXG4gICAqL1xuICBzYXZlQ29tcG9uZW50czogYW55W10gPSBbXTtcblxuICBub3RpZnkoXG4gICAgb3B0aW9uczoge1xuICAgICAgc3VjY2Vzcz86IHN0cmluZyB8IG51bGw7XG4gICAgICBlcnJvcj86IHN0cmluZztcbiAgICB9ID0ge31cbiAgKTogPFQ+KHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD4ge1xuICAgIGNvbnN0IGZpbmFsT3B0aW9ucyA9IHtcbiAgICAgIHN1Y2Nlc3M6ICdHRU5FUkFMLk9QRVJBVElPTl9DT01QTEVURUQnLFxuICAgICAgZXJyb3I6ICdHRU5FUkFMLk9QRVJBVElPTl9GQUlMRUQnLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG5cbiAgICByZXR1cm4gPFQ+KHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IHtcbiAgICAgIHJldHVybiBzb3VyY2UkLnBpcGUoXG4gICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGZpbmFsT3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnNuYWNrQmFyLm9wZW4oXG4gICAgICAgICAgICAgIHRoaXMudHJhbnNsb2NvLnRyYW5zbGF0ZShmaW5hbE9wdGlvbnMuc3VjY2VzcyksXG4gICAgICAgICAgICAgIHRoaXMudHJhbnNsb2NvLnRyYW5zbGF0ZSgnR0VORVJBTC5ESVNNSVNTJyksXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgICAgICBpZiAoZmluYWxPcHRpb25zLmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLnNuYWNrQmFyLm9wZW4oXG4gICAgICAgICAgICAgIHRoaXMudHJhbnNsb2NvLnRyYW5zbGF0ZShmaW5hbE9wdGlvbnMuZXJyb3IpLFxuICAgICAgICAgICAgICB0aGlzLnRyYW5zbG9jby50cmFuc2xhdGUoJ0dFTkVSQUwuRElTTUlTUycpLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFuZWxDbGFzczogJ3NuYWNrLWJhci1lcnJvcicsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfTtcbiAgfVxufVxuIl19