import { ComponentPortal } from '@angular/cdk/portal';
import { SEGMENT_TYPE_COMPONENT_MAP } from '../consts/segment-type-component-map.const';
import { SegmentType } from '../enums/segment-type.enum';
import { ConditionAction, ConditionEvaluate, ConditionType } from '../interfaces/condition.interface';
import { createSegmentInjector } from './create-segment-injector';
import { safeEval } from './safe-eval';
export function compileSegment(segment, parser, definitions, injector, entryValue, parent = '') {
    const classes = [];
    let fields = [];
    if (segment.columnsDesktop) {
        classes.push(`col-${segment.columnsDesktop}`);
    }
    if (segment.columnsTablet) {
        classes.push(`col-m-${segment.columnsTablet}`);
    }
    if (segment.columnsMobile) {
        classes.push(`col-s-${segment.columnsMobile}`);
    }
    /**
     * If there aren't any column definitions
     * default to full width
     */
    if (!classes.length) {
        classes.push('col-12');
    }
    if (segment.classes) {
        classes.push(...segment.classes);
    }
    if (segment.fields) {
        /**
         * If it's an array fields aren' parsed
         */
        if (segment.array) {
            // @ts-ignore
            fields = (segment.fields || []).map(fi => segment.array + fi);
        }
        else {
            fields = (segment.fields || [])
                // @ts-ignore
                .reduce((acc, key) => {
                const definition = parser.getFromDefinitions(key, definitions);
                if (!definition ||
                    !definition.roles ||
                    (typeof definition.roles === 'string' ?
                        definition.roles === parser.role :
                        definition.roles.includes(parser.role))) {
                    acc.push(parser.field(key, parser.pointers[key], definitions));
                }
                return acc;
            }, []);
        }
    }
    const compiledSegment = Object.assign(Object.assign({}, segment), { classes,
        fields,
        entryValue });
    /**
     * TODO:
     * Statement support
     */
    if (segment.conditions) {
        compiledSegment.conditions = [];
        const valToPass = entryValue || {};
        for (const cur of segment.conditions) {
            let condition;
            const type = cur.type || ConditionType.Function;
            const action = cur.action || ConditionAction.Show;
            const evaluateOn = cur.evaluateOn || ConditionEvaluate.OnLoad;
            const evaluateStates = cur.evaluateStates || [0, 1, 2];
            if (cur.condition) {
                condition = safeEval(cur.condition);
            }
            if (condition) {
                /**
                 * Evaluate on load conditions
                 */
                if (evaluateOn === ConditionEvaluate.OnLoad) {
                    /**
                     * Check if items should be excluded right away
                     */
                    if ((action === ConditionAction.Show && !condition(valToPass)) ||
                        (action === ConditionAction.Hide && condition(valToPass))) {
                        return null;
                    }
                }
                compiledSegment.conditions.push(Object.assign({ condition,
                    type,
                    action,
                    evaluateStates,
                    evaluateOn }, cur.data && {
                    data: cur.data
                }));
            }
        }
    }
    return Object.assign({ component: new ComponentPortal(SEGMENT_TYPE_COMPONENT_MAP[segment.type || SegmentType.Card], null, createSegmentInjector(injector, Object.assign({ segment: compiledSegment, parser,
            definitions }, parent && { parent }))) }, compiledSegment);
}
//# sourceMappingURL=data:application/json;base64,