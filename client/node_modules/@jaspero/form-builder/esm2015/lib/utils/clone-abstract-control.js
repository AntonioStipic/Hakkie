import { FormArray, FormControl, FormGroup } from '@angular/forms';
/**
 * Deep clones the given AbstractControl, preserving values, validators, async validators, and disabled status.
 * @param control AbstractControl
 * @returns AbstractControl
 */
export function cloneAbstractControl(control) {
    let newControl;
    if (control instanceof FormGroup) {
        const formGroup = new FormGroup({}, control.validator, control.asyncValidator);
        const controls = control.controls;
        Object.keys(controls).forEach(key => {
            formGroup.addControl(key, cloneAbstractControl(controls[key]));
        });
        newControl = formGroup;
    }
    else if (control instanceof FormArray) {
        const formArray = new FormArray([], control.validator, control.asyncValidator);
        control.controls.forEach(formControl => formArray.push(cloneAbstractControl(formControl)));
        newControl = formArray;
    }
    else if (control instanceof FormControl) {
        newControl = new FormControl(control.value, control.validator, control.asyncValidator);
    }
    else {
        throw new Error('Error: unexpected control value');
    }
    if (control.disabled) {
        newControl.disable({ emitEvent: false });
    }
    return newControl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmUtYWJzdHJhY3QtY29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Zvcm0tYnVpbGRlci9zcmMvbGliL3V0aWxzL2Nsb25lLWFic3RyYWN0LWNvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsU0FBUyxFQUNWLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEI7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBNEIsT0FBVTtJQUN4RSxJQUFJLFVBQWEsQ0FBQztJQUVsQixJQUFJLE9BQU8sWUFBWSxTQUFTLEVBQUU7UUFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQzdCLEVBQUUsRUFDRixPQUFPLENBQUMsU0FBUyxFQUNqQixPQUFPLENBQUMsY0FBYyxDQUN2QixDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUVsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsVUFBVSxHQUFHLFNBQWdCLENBQUM7S0FDL0I7U0FBTSxJQUFJLE9BQU8sWUFBWSxTQUFTLEVBQUU7UUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQzdCLEVBQUUsRUFDRixPQUFPLENBQUMsU0FBUyxFQUNqQixPQUFPLENBQUMsY0FBYyxDQUN2QixDQUFDO1FBRUYsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUNsRCxDQUFDO1FBRUYsVUFBVSxHQUFHLFNBQWdCLENBQUM7S0FDL0I7U0FBTSxJQUFJLE9BQU8sWUFBWSxXQUFXLEVBQUU7UUFDekMsVUFBVSxHQUFHLElBQUksV0FBVyxDQUMxQixPQUFPLENBQUMsS0FBSyxFQUNiLE9BQU8sQ0FBQyxTQUFTLEVBQ2pCLE9BQU8sQ0FBQyxjQUFjLENBQ2hCLENBQUM7S0FDVjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ3BEO0lBRUQsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1FBQ3BCLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztLQUN4QztJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBYnN0cmFjdENvbnRyb2wsXG4gIEZvcm1BcnJheSxcbiAgRm9ybUNvbnRyb2wsXG4gIEZvcm1Hcm91cFxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICogRGVlcCBjbG9uZXMgdGhlIGdpdmVuIEFic3RyYWN0Q29udHJvbCwgcHJlc2VydmluZyB2YWx1ZXMsIHZhbGlkYXRvcnMsIGFzeW5jIHZhbGlkYXRvcnMsIGFuZCBkaXNhYmxlZCBzdGF0dXMuXG4gKiBAcGFyYW0gY29udHJvbCBBYnN0cmFjdENvbnRyb2xcbiAqIEByZXR1cm5zIEFic3RyYWN0Q29udHJvbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVBYnN0cmFjdENvbnRyb2w8VCBleHRlbmRzIEFic3RyYWN0Q29udHJvbD4oY29udHJvbDogVCk6IFQge1xuICBsZXQgbmV3Q29udHJvbDogVDtcblxuICBpZiAoY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Hcm91cCkge1xuICAgIGNvbnN0IGZvcm1Hcm91cCA9IG5ldyBGb3JtR3JvdXAoXG4gICAgICB7fSxcbiAgICAgIGNvbnRyb2wudmFsaWRhdG9yLFxuICAgICAgY29udHJvbC5hc3luY1ZhbGlkYXRvclxuICAgICk7XG4gICAgY29uc3QgY29udHJvbHMgPSBjb250cm9sLmNvbnRyb2xzO1xuXG4gICAgT2JqZWN0LmtleXMoY29udHJvbHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGZvcm1Hcm91cC5hZGRDb250cm9sKGtleSwgY2xvbmVBYnN0cmFjdENvbnRyb2woY29udHJvbHNba2V5XSkpO1xuICAgIH0pO1xuXG4gICAgbmV3Q29udHJvbCA9IGZvcm1Hcm91cCBhcyBhbnk7XG4gIH0gZWxzZSBpZiAoY29udHJvbCBpbnN0YW5jZW9mIEZvcm1BcnJheSkge1xuICAgIGNvbnN0IGZvcm1BcnJheSA9IG5ldyBGb3JtQXJyYXkoXG4gICAgICBbXSxcbiAgICAgIGNvbnRyb2wudmFsaWRhdG9yLFxuICAgICAgY29udHJvbC5hc3luY1ZhbGlkYXRvclxuICAgICk7XG5cbiAgICBjb250cm9sLmNvbnRyb2xzLmZvckVhY2goZm9ybUNvbnRyb2wgPT5cbiAgICAgIGZvcm1BcnJheS5wdXNoKGNsb25lQWJzdHJhY3RDb250cm9sKGZvcm1Db250cm9sKSlcbiAgICApO1xuXG4gICAgbmV3Q29udHJvbCA9IGZvcm1BcnJheSBhcyBhbnk7XG4gIH0gZWxzZSBpZiAoY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Db250cm9sKSB7XG4gICAgbmV3Q29udHJvbCA9IG5ldyBGb3JtQ29udHJvbChcbiAgICAgIGNvbnRyb2wudmFsdWUsXG4gICAgICBjb250cm9sLnZhbGlkYXRvcixcbiAgICAgIGNvbnRyb2wuYXN5bmNWYWxpZGF0b3JcbiAgICApIGFzIGFueTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yOiB1bmV4cGVjdGVkIGNvbnRyb2wgdmFsdWUnKTtcbiAgfVxuXG4gIGlmIChjb250cm9sLmRpc2FibGVkKSB7XG4gICAgbmV3Q29udHJvbC5kaXNhYmxlKHtlbWl0RXZlbnQ6IGZhbHNlfSk7XG4gIH1cblxuICByZXR1cm4gbmV3Q29udHJvbDtcbn1cbiJdfQ==