import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ComponentPortal } from '@angular/cdk/portal';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { COMPONENT_TYPE_COMPONENT_MAP } from '../consts/component-type-component-map.const';
import { SchemaType } from '../enums/schema-type.enum';
import { State } from '../enums/state.enum';
import { SchemaValidators } from '../validators/schema-validators.class';
import { createComponentInjector } from './create-component-injector';
import { safeEval } from './safe-eval';
import { schemaToComponent } from './schema-to-component';
// @dynamic
export class Parser {
    constructor(schema, injector, state, role, definitions = {}, customFields = {}) {
        this.schema = schema;
        this.injector = injector;
        this.state = state;
        this.role = role;
        this.definitions = definitions;
        this.customFields = customFields;
        this.pointers = {};
    }
    static standardizeKey(key) {
        if (key[0] === '/') {
            key = key.slice(1, key.length);
        }
        return key;
    }
    static stringControl(definition, required) {
        const controlValidation = [];
        const validation = {};
        if (required) {
            controlValidation.push(Validators.required);
            validation.required = true;
        }
        if (definition.maxLength) {
            controlValidation.push(Validators.maxLength(definition.maxLength));
            validation.maxLength = definition.maxLength;
        }
        if (definition.minLength) {
            controlValidation.push(Validators.minLength(definition.minLength));
            validation.minLength = definition.minLength;
        }
        if (definition.pattern) {
            controlValidation.push(Validators.pattern(definition.pattern));
            validation.patter = definition.pattern;
        }
        return {
            control: new FormControl(definition.default || '', controlValidation),
            validation
        };
    }
    static numberControl(definition, required) {
        const validation = {};
        const controlValidation = [];
        if (required) {
            controlValidation.push(Validators.required);
            validation.required = true;
        }
        if (definition.minimum) {
            const minimum = definition.minimum + (definition.exclusiveMinimum ? 1 : 0);
            controlValidation.push(Validators.min(minimum));
            validation.minimum = minimum;
        }
        if (definition.maximum) {
            const maximum = definition.maximum - (definition.exclusiveMaximum ? 1 : 0);
            controlValidation.push(Validators.max(maximum));
            validation.maximum = maximum;
        }
        if (definition.multipleOf) {
            controlValidation.push(SchemaValidators.multipleOf(definition.multipleOf));
            validation.multipleOf = definition.multipleOf;
        }
        return {
            control: new FormControl(definition.default || null, controlValidation),
            validation
        };
    }
    static booleanControl(definition, required) {
        const controlValidation = [];
        const validation = {};
        if (required) {
            controlValidation.push(Validators.required);
            validation.required = true;
        }
        return {
            control: new FormControl(definition.default || false, controlValidation),
            validation
        };
    }
    buildForm(value, required = [], base = '/', addId = true) {
        const properties = this.buildProperties(this.schema.properties || {}, required, base, addId);
        this.form = properties.form;
        this.pointers = properties.pointers;
        if (value) {
            this.form.patchValue(value);
        }
        return this.form;
    }
    buildProperties(properties, required = [], base = '/', addId = true) {
        const { form, pointers } = [
            ...Object.entries(properties),
            /**
             * Add the id field as a property so that
             * it can be added to the form if needed
             */
            ...(addId
                ? [
                    [
                        'id',
                        {
                            type: 'string'
                        }
                    ]
                ]
                : [])
        ].reduce((group, [key, value]) => {
            const isRequired = required.includes(key);
            let parsed;
            switch (value.type) {
                case SchemaType.String:
                    parsed = Parser.stringControl(value, isRequired);
                    break;
                case SchemaType.Number:
                case SchemaType.Integer:
                    parsed = Parser.numberControl(value, isRequired);
                    break;
                case SchemaType.Boolean:
                    parsed = Parser.booleanControl(value, isRequired);
                    break;
                case SchemaType.Object:
                    const objectProperties = this.buildProperties(
                    /**
                     * Supporting both {type: 'object', properties: {}} and
                     * {type: 'object', items: {properties: {}}}
                     */
                    value.properties || (value.items && value.items.properties ? value.items.properties : {}), value.required || value.items && value.items.required ? value.items.required : [], base + key + '/', false);
                    for (const added in objectProperties.pointers) {
                        if (objectProperties.pointers.hasOwnProperty(added)) {
                            // @ts-ignore
                            group.pointers[added] = objectProperties.pointers[added];
                        }
                    }
                    parsed = {
                        control: objectProperties.form,
                        validation: {}
                    };
                    break;
                case SchemaType.Array:
                    parsed = this.buildArray(base, value);
                    break;
            }
            const pointerKey = base + key;
            const definition = this.getFromDefinitions(pointerKey) || {};
            // @ts-ignore
            group.form[key] = parsed.control;
            // @ts-ignore
            group.pointers[pointerKey] = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ key, type: value.type }, definition.formatOnLoad
                && { formatOnLoad: safeEval(definition.formatOnLoad) }), definition.formatOnSave
                && { formatOnSave: safeEval(definition.formatOnSave) }), definition.formatOnCreate
                && { formatOnCreate: safeEval(definition.formatOnCreate) }), definition.formatOnEdit
                && { formatOnEdit: safeEval(definition.formatOnEdit) }), parsed);
            return group;
        }, {
            form: {},
            pointers: {}
        });
        return {
            pointers,
            form: new FormGroup(form)
        };
    }
    /**
     * @param pointerKey Lookup key for the pointer
     * @param pointer Entire pointer object that should be used
     * @param definitions Entire definitions object that should be used
     * @param single Defines if the field shown in the form or in the table
     * @param arrayRoot If the field is in an array what root lookup to use
     */
    field(pointerKey, pointer, definitions = {}, single = true, arrayRoot) {
        if (!pointer) {
            console.log('Pointers: ', this.pointers);
            throw new Error(`Couldn't find pointer for ${pointerKey}.`);
        }
        const { key, type, control, validation } = pointer;
        const definition = Object.assign({ label: key }, this.getFromDefinitions(pointerKey, definitions));
        if ((definition.disableOn &&
            (Array.isArray(definition.disableOn) ?
                definition.disableOn.includes(this.state)
                : definition.disableOn === this.state)) ||
            (definition.disableForRoles &&
                (Array.isArray(definition.disableForRoles) ?
                    definition.disableForRoles.includes(this.role)
                    : definition.disableForRoles === this.role))) {
            control.disable();
        }
        /**
         * We don't show labels in the table
         */
        if (!single) {
            definition.label = '';
        }
        if (!definition.component) {
            definition.component = schemaToComponent(type);
        }
        // @ts-ignore
        const component = COMPONENT_TYPE_COMPONENT_MAP[definition.component.type] || this.customFields[definition.component.type];
        if (!component) {
            // @ts-ignore
            throw new Error(`Couldn't find a component defined for type: ${definition.component.type}`);
        }
        const portal = new ComponentPortal(component, null, createComponentInjector(this.injector, Object.assign(Object.assign({ control,
            validation,
            single, pointers: this.pointers, form: this.form }, definition), (definition.component.configuration || {}))));
        return {
            pointer: pointerKey,
            control,
            portal,
            validation,
            placeholder: definition.placeholder || '',
            label: definition.label,
            onlyOn: definition.onlyOn
        };
    }
    addArrayItem(pointer, loadHooks = false, parentArray) {
        const pointers = parentArray ? this.pointers[parentArray.pointer].arrayPointers[parentArray.index] : this.pointers;
        const target = pointers[pointer];
        const control = pointers[pointer].control;
        if (target.arrayType === SchemaType.Array ||
            target.arrayType === SchemaType.Object) {
            const properties = this.buildProperties(target.properties, target.required, pointer + '/', false);
            if (loadHooks) {
                this.loadHooks(properties.pointers);
            }
            // @ts-ignore
            target.arrayPointers.unshift(properties.pointers);
            control.controls.unshift(properties.form);
            return properties.pointers;
        }
        else {
            const cont = new FormControl('');
            control.controls.unshift(cont);
            return cont;
        }
    }
    moveArrayItem(pointer, fromIndex, toIndex, parentArray) {
        const pointers = parentArray ? this.pointers[parentArray.pointer].arrayPointers[parentArray.index] : this.pointers;
        const target = pointers[pointer];
        const control = pointers[pointer].control;
        if (target.arrayType === SchemaType.Array ||
            target.arrayType === SchemaType.Object) {
            moveItemInArray(target.arrayPointers, fromIndex, toIndex);
        }
        moveItemInArray(control.controls, fromIndex, toIndex);
    }
    removeArrayItem(pointer, index, parentArray) {
        const pointers = parentArray ? this.pointers[parentArray.pointer].arrayPointers[parentArray.index] : this.pointers;
        pointers[pointer].arrayPointers.splice(index, 1);
        pointers[pointer].control.removeAt(index);
    }
    loadHooks(pointers = this.pointers) {
        Object.values(pointers).forEach(entry => {
            /**
             * TODO:
             * For the moment formatOn methods are
             * only supported on FormControls.
             * We might want to expand on this later on.
             */
            if (entry.control instanceof FormControl && entry.formatOnLoad) {
                const adjustedValue = entry.formatOnLoad(entry.control.value);
                if (adjustedValue !== entry.control.value) {
                    entry.control.setValue(adjustedValue);
                }
            }
        });
    }
    preSaveHooks(currentState, statesToProcess = [State.Create, State.Edit], pointers = this.pointers) {
        const preSaveData = this.form.getRawValue();
        Object.values(pointers).forEach(entry => {
            /**
             * TODO:
             * For the moment formatOn methods are
             * only supported on FormControls.
             * We might want to expand on this later on.
             */
            if (entry.control instanceof FormControl) {
                let value = entry.control.value;
                if (entry.formatOnSave) {
                    value = entry.formatOnSave(value, preSaveData);
                }
                if (statesToProcess.includes(currentState)) {
                    if (currentState === State.Edit && entry.formatOnEdit) {
                        value = entry.formatOnEdit(value, preSaveData);
                    }
                    else if (entry.formatOnCreate) {
                        value = entry.formatOnCreate(value, preSaveData);
                    }
                }
                if (value !== entry.control.value) {
                    entry.control.setValue(value);
                }
            }
            if (entry.arrayPointers) {
                entry.arrayPointers.forEach(arrayPointers => this.preSaveHooks(currentState, statesToProcess, arrayPointers));
            }
        });
    }
    getFromDefinitions(key, definitions = this.definitions) {
        return definitions[Parser.standardizeKey(key)];
    }
    /**
     * TODO:
     * - Handle contains case
     * - Handle items or contains as array not object
     */
    buildArray(base, definition) {
        if (!definition.items) {
            return Object.assign({ control: new FormControl([]) }, (definition.items
                ? {
                    arrayType: definition.items.type,
                    properties: definition.items.properties,
                    required: definition.items.required,
                    validation: {}
                }
                : {
                    arrayType: SchemaType.String,
                    validation: {}
                }));
        }
        else {
            return {
                arrayType: definition.items.type,
                properties: definition.items.properties,
                required: definition.items.required,
                validation: {},
                control: new FormArray([]),
                arrayPointers: []
            };
        }
    }
}
//# sourceMappingURL=data:application/json;base64,