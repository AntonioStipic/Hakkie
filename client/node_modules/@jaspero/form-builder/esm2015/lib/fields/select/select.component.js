import { ChangeDetectionStrategy, Component, Inject, Optional } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { map, startWith, switchMap, tap } from 'rxjs/operators';
import { FieldComponent } from '../../field/field.component';
import { DbService } from '../../services/db.service';
import { ADDITIONAL_CONTEXT } from '../../utils/additional-context';
import { COMPONENT_DATA } from '../../utils/create-component-injector';
import { parseTemplate } from '../../utils/parse-template';
import { ROLE } from '../../utils/role';
import { safeEval } from '../../utils/safe-eval';
export class SelectComponent extends FieldComponent {
    constructor(cData, dbService, role, additionalContext) {
        super(cData);
        this.cData = cData;
        this.dbService = dbService;
        this.role = role;
        this.additionalContext = additionalContext;
        this.loading$ = new BehaviorSubject(true);
    }
    ngOnInit() {
        if (this.cData.populate) {
            const populate = this.cData.populate;
            const mapResults = populate.mapResults ? safeEval(populate.mapResults) : null;
            const documentsMethod = (query) => {
                this.loading$.next(true);
                if (!query) {
                    this.loading$.next(false);
                    return of([]);
                }
                if (query.filter && typeof query.filter === 'string') {
                    return this.dbService.getDocument(query.collection, query.filter)
                        .pipe(map(it => {
                        return (mapResults ? mapResults(it) : [it]).map((doc) => ({
                            value: doc[populate.valueKey || 'id'],
                            name: parseTemplate(populate.nameKey || 'name', doc)
                        }));
                    }), tap(() => this.loading$.next(false)));
                }
                return this.dbService
                    .getDocumentsSimple(query.collection, query.orderBy, query.filter)
                    .pipe(map(docs => {
                    if (mapResults) {
                        docs = mapResults(docs, {
                            fieldData: this.cData,
                            value: this.cData.form.getRawValue(),
                            role: this.role,
                            additionalContext: this.additionalContext
                        });
                    }
                    return docs.map(doc => ({
                        value: doc[populate.valueKey || 'id'],
                        name: parseTemplate(populate.nameKey || 'name', doc)
                    }));
                }), tap(() => this.loading$.next(false)));
            };
            if (populate.dependency) {
                const pointer = this.cData.pointers[populate.dependency.key];
                const gm = safeEval(populate.dependency.method);
                this.dataSet$ = pointer.control.valueChanges
                    .pipe(startWith(pointer.control.value), switchMap(value => documentsMethod(gm(value, {
                    fieldData: this.cData,
                    value: this.cData.form.getRawValue(),
                    role: this.role,
                    additionalContext: this.additionalContext
                }))));
            }
            else {
                let filter = populate.filter;
                if (populate.dynamicFilter) {
                    filter = safeEval(populate.dynamicFilter)({
                        fieldData: this.cData,
                        value: this.cData.form.getRawValue(),
                        role: this.role,
                        additionalContext: this.additionalContext
                    });
                }
                this.dataSet$ = documentsMethod({
                    collection: populate.collection,
                    orderBy: populate.orderBy,
                    filter
                });
            }
        }
        else {
            this.dataSet$ = of(this.cData.dataSet);
        }
    }
}
SelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-select',
                template: "<mat-form-field class=\"w-full\" appearance=\"outline\" [class.mat-form-field-has-hint]=\"cData.hint\">\n  <mat-label>{{(cData.label || '') | transloco}}</mat-label>\n  <mat-select\n    [placeholder]=\"(cData.placeholder || '') | transloco\"\n    [formControl]=\"cData.control\"\n    [multiple]=\"cData.multiple\"\n    [attr.autocomplite]=\"cData.autocomplete || 'off'\">\n    <mat-option *ngFor=\"let data of dataSet$ | async\" [value]=\"data.value\" [disabled]=\"data.disabled\">\n      {{data.name}}\n    </mat-option>\n  </mat-select>\n  <mat-spinner\n    matSuffix\n    *ngIf=\"cData.populate && (loading$ | async)\"\n    [diameter]=\"20\"></mat-spinner>\n  <mat-hint *ngIf=\"cData.hint\" [innerHTML]=\"cData.hint | jpSanitize\"></mat-hint>\n</mat-form-field>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            },] }
];
SelectComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_DATA,] }] },
    { type: DbService },
    { type: String, decorators: [{ type: Inject, args: [ROLE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ADDITIONAL_CONTEXT,] }] }
];
//# sourceMappingURL=data:application/json;base64,