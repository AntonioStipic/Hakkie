import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { map, startWith, switchMap, tap } from 'rxjs/operators';
import { DbService } from '../../services/db.service';
import { FieldComponent } from '../../field/field.component';
import { COMPONENT_DATA } from '../../utils/create-component-injector';
import { getHsd } from '../../utils/get-hsd';
export class AutocompleteComponent extends FieldComponent {
    constructor(cData, dbService) {
        super(cData);
        this.cData = cData;
        this.dbService = dbService;
        this.loading$ = new BehaviorSubject(true);
    }
    ngOnInit() {
        this.prefix$ = getHsd('prefix', this.cData);
        this.suffix$ = getHsd('suffix', this.cData);
        let dataSet$;
        if (this.cData.populate) {
            const { populate } = this.cData;
            dataSet$ = this.dbService
                .getDocumentsSimple(this.cData.populate.collection, this.cData.populate.orderBy, this.cData.populate.filter)
                .pipe(map(docs => docs.map(doc => ({
                value: doc[populate.valueKey || 'id'],
                name: doc[populate.nameKey]
            }))), tap(() => this.loading$.next(false)));
        }
        else {
            dataSet$ = of(this.cData.dataSet);
        }
        this.filteredSet$ = dataSet$.pipe(switchMap(dataSet => this.cData.control.valueChanges.pipe(startWith(this.cData.control.value), map(value => {
            if (!value) {
                return dataSet;
            }
            value = value.toLowerCase();
            return dataSet.filter(item => item.name.toLowerCase().includes(value));
        }))));
    }
}
AutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-autocomplete',
                template: "<mat-form-field appearance=\"outline\" class=\"w-full\">\n  <mat-label>{{(cData.label || '') | transloco}}</mat-label>\n  <input\n    matInput\n    [placeholder]=\"(cData.placeholder || '') | transloco\"\n    [attr.autocomplete]=\"cData.autocomplete || 'on'\"\n    [formControl]=\"cData.control\"\n    [matAutocomplete]=\"auto\">\n  <mat-autocomplete #auto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let data of filteredSet$ | async\" [value]=\"data.value\">\n      {{data.name}}\n    </mat-option>\n  </mat-autocomplete>\n  <mat-hint *ngIf=\"cData.hint\" [innerHTML]=\"cData.hint | jpSanitize\"></mat-hint>\n  <span *ngIf=\"cData.suffix\" matSuffix [innerHTML]=\"((suffix$ | async) || '') | jpSanitize\"></span>\n  <span *ngIf=\"cData.prefix\" matPrefix [innerHTML]=\"((prefix$ | async) || '') | jpSanitize\"></span>\n</mat-form-field>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            },] }
];
AutocompleteComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_DATA,] }] },
    { type: DbService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Zvcm0tYnVpbGRlci9zcmMvbGliL2ZpZWxkcy9hdXRvY29tcGxldGUvYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxNQUFNLEVBRVAsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGVBQWUsRUFBYyxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzlELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFHM0QsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxNQUFNLEVBQU0sTUFBTSxxQkFBcUIsQ0FBQztBQXNCaEQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGNBQWdDO0lBRXpFLFlBQ2lDLEtBQXVCLEVBQzlDLFNBQW9CO1FBRTVCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUhrQixVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUM5QyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBTTlCLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUhyQyxDQUFDO0lBT0QsUUFBUTtRQUVOLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1QyxJQUFJLFFBQTBELENBQUM7UUFFL0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUV2QixNQUFNLEVBQUMsUUFBUSxFQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUU5QixRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVM7aUJBQ3RCLGtCQUFrQixDQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUMzQjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztnQkFDckMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2FBQzVCLENBQUMsQ0FBQyxDQUNKLEVBQ0QsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3JDLENBQUM7U0FDTDthQUFNO1lBQ0wsUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25DO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUMvQixTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDbEMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUNuQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLE9BQU8sT0FBTyxDQUFDO2FBQ2hCO1lBRUQsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUU1QixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQ3hDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXBFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsczFCQUE0QztnQkFFNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7NENBSUksTUFBTSxTQUFDLGNBQWM7WUE5QmxCLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbmplY3QsXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgc3RhcnRXaXRoLCBzd2l0Y2hNYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtEYlNlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RiLnNlcnZpY2UnO1xuaW1wb3J0IHtGaWVsZENvbXBvbmVudH0gZnJvbSAnLi4vLi4vZmllbGQvZmllbGQuY29tcG9uZW50JztcbmltcG9ydCB7RmllbGREYXRhfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLWRhdGEuaW50ZXJmYWNlJztcbmltcG9ydCB7V2hlcmVGaWx0ZXJ9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvd2hlcmUtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQge0NPTVBPTkVOVF9EQVRBfSBmcm9tICcuLi8uLi91dGlscy9jcmVhdGUtY29tcG9uZW50LWluamVjdG9yJztcbmltcG9ydCB7Z2V0SHNkLCBIU0R9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1oc2QnO1xuXG5pbnRlcmZhY2UgQXV0b2NvbXBsZXRlRGF0YSBleHRlbmRzIEZpZWxkRGF0YSB7XG4gIGRhdGFTZXQ6IEFycmF5PHtuYW1lOiBzdHJpbmc7IHZhbHVlOiBhbnl9PjtcbiAgcG9wdWxhdGU/OiB7XG4gICAgY29sbGVjdGlvbjogc3RyaW5nO1xuICAgIG5hbWVLZXk6IHN0cmluZztcbiAgICB2YWx1ZUtleT86IHN0cmluZztcbiAgICBvcmRlckJ5Pzogc3RyaW5nO1xuICAgIGZpbHRlcj86IFdoZXJlRmlsdGVyO1xuICB9O1xuICBhdXRvY29tcGxldGU/OiBzdHJpbmc7XG4gIHN1ZmZpeD86IEhTRDtcbiAgcHJlZml4PzogSFNEO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmYi1hdXRvY29tcGxldGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEF1dG9jb21wbGV0ZUNvbXBvbmVudCBleHRlbmRzIEZpZWxkQ29tcG9uZW50PEF1dG9jb21wbGV0ZURhdGE+XG4gIGltcGxlbWVudHMgT25Jbml0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChDT01QT05FTlRfREFUQSkgcHVibGljIGNEYXRhOiBBdXRvY29tcGxldGVEYXRhLFxuICAgIHByaXZhdGUgZGJTZXJ2aWNlOiBEYlNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoY0RhdGEpO1xuICB9XG5cbiAgZmlsdGVyZWRTZXQkOiBPYnNlcnZhYmxlPEFycmF5PHtuYW1lOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmd9Pj47XG4gIGxvYWRpbmckID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0cnVlKTtcbiAgcHJlZml4JDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICBzdWZmaXgkOiBPYnNlcnZhYmxlPHN0cmluZz47XG5cbiAgbmdPbkluaXQoKSB7XG5cbiAgICB0aGlzLnByZWZpeCQgPSBnZXRIc2QoJ3ByZWZpeCcsIHRoaXMuY0RhdGEpO1xuICAgIHRoaXMuc3VmZml4JCA9IGdldEhzZCgnc3VmZml4JywgdGhpcy5jRGF0YSk7XG5cbiAgICBsZXQgZGF0YVNldCQ6IE9ic2VydmFibGU8QXJyYXk8e25hbWU6IHN0cmluZzsgdmFsdWU6IHN0cmluZ30+PjtcblxuICAgIGlmICh0aGlzLmNEYXRhLnBvcHVsYXRlKSB7XG5cbiAgICAgIGNvbnN0IHtwb3B1bGF0ZX0gPSB0aGlzLmNEYXRhO1xuXG4gICAgICBkYXRhU2V0JCA9IHRoaXMuZGJTZXJ2aWNlXG4gICAgICAgIC5nZXREb2N1bWVudHNTaW1wbGUoXG4gICAgICAgICAgdGhpcy5jRGF0YS5wb3B1bGF0ZS5jb2xsZWN0aW9uLFxuICAgICAgICAgIHRoaXMuY0RhdGEucG9wdWxhdGUub3JkZXJCeSxcbiAgICAgICAgICB0aGlzLmNEYXRhLnBvcHVsYXRlLmZpbHRlclxuICAgICAgICApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIG1hcChkb2NzID0+XG4gICAgICAgICAgICBkb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgICAgICAgICAgdmFsdWU6IGRvY1twb3B1bGF0ZS52YWx1ZUtleSB8fCAnaWQnXSxcbiAgICAgICAgICAgICAgbmFtZTogZG9jW3BvcHVsYXRlLm5hbWVLZXldXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICApLFxuICAgICAgICAgIHRhcCgoKSA9PiB0aGlzLmxvYWRpbmckLm5leHQoZmFsc2UpKVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhU2V0JCA9IG9mKHRoaXMuY0RhdGEuZGF0YVNldCk7XG4gICAgfVxuXG4gICAgdGhpcy5maWx0ZXJlZFNldCQgPSBkYXRhU2V0JC5waXBlKFxuICAgICAgc3dpdGNoTWFwKGRhdGFTZXQgPT5cbiAgICAgICAgdGhpcy5jRGF0YS5jb250cm9sLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgICAgIHN0YXJ0V2l0aCh0aGlzLmNEYXRhLmNvbnRyb2wudmFsdWUpLFxuICAgICAgICAgIG1hcCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkYXRhU2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhU2V0LmZpbHRlcihpdGVtID0+XG4gICAgICAgICAgICAgIGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHZhbHVlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuIl19