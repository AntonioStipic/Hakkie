import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { DomSanitizer } from '@angular/platform-browser';
import { TranslocoService } from '@ngneat/transloco';
import { from, of, throwError } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { FieldComponent } from '../../field/field.component';
import { FormBuilderService } from '../../form-builder.service';
import { StorageService } from '../../services/storage.service';
import { COMPONENT_DATA } from '../../utils/create-component-injector';
import { formatFileName } from '../../utils/format-file-name';
import { formatGeneratedImages } from '../../utils/format-generated-images';
import { parseSize } from '../../utils/parse-size';
export class ImageComponent extends FieldComponent {
    constructor(cData, storage, cdr, formBuilderService, transloco, snackBar, domSanitizer) {
        super(cData);
        this.cData = cData;
        this.storage = storage;
        this.cdr = cdr;
        this.formBuilderService = formBuilderService;
        this.transloco = transloco;
        this.snackBar = snackBar;
        this.domSanitizer = domSanitizer;
        this.disInput = false;
    }
    ngOnInit() {
        this.imageUrl = new FormControl(this.cData.control.value);
        this.formBuilderService.saveComponents.push(this);
        this.allowedImageTypes = this.cData.allowedImageTypes || [];
        this.forbiddenImageTypes = this.cData.forbiddenImageTypes || [];
        this.minSizeBytes = this.cData.minSize ? parseSize(this.cData.minSize) : 0;
        this.maxSizeBytes = this.cData.maxSize ? parseSize(this.cData.maxSize) : 0;
    }
    errorSnack(message = 'GENERAL.ERROR', dismiss = 'GENERAL.DISMISS') {
        this.snackBar.open(this.transloco.translate(message), this.transloco.translate(dismiss), {
            panelClass: 'snack-bar-error',
            duration: 5000
        });
    }
    openFileUpload() {
        this.fileEl.nativeElement.click();
    }
    filesImage(event) {
        const el = event.target;
        const image = Array.from(el.files)[0];
        Object.defineProperty(image, 'name', {
            writable: true,
            value: formatFileName(image.name)
        });
        if (!this.allowedImageTypes.includes(image.type) && !!this.allowedImageTypes.length) {
            this.errorSnack('FIELDS.GALLERY.INVALID_IMAGE_FORMAT');
            return throwError('Invalid Image Format');
        }
        if (this.forbiddenImageTypes.includes(image.type)) {
            this.errorSnack('FIELDS.GALLERY.FORBIDDEN_IMAGE_FORMAT');
            return throwError('Forbidden Image Format');
        }
        if (image.size < this.minSizeBytes) {
            this.errorSnack('FIELDS.GALLERY.BELOW_SIZE');
            return throwError('Image below minimal allowed size');
        }
        if (image.size > this.maxSizeBytes && !!this.maxSizeBytes) {
            this.errorSnack('FIELDS.GALLERY.EXCEED_SIZE');
            return throwError('Image exceeding allowed size');
        }
        this.value = image;
        this.disInput = true;
        this.imageUrl.setValue(this.value.name);
        const reader = new FileReader();
        reader.onload = () => {
            this.imageSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(reader.result);
            this.cdr.detectChanges();
        };
        reader.readAsDataURL(this.value);
        el.value = '';
    }
    remove() {
        this.imageUrl.setValue('');
        this.value = null;
        this.disInput = false;
        this.cdr.detectChanges();
    }
    save(moduleId, documentId) {
        if (this.value) {
            if (this.imageUrl.value && this.imageUrl.value !== this.value.name) {
                return of(this.imageUrl.value).pipe(tap(() => this.cData.control.setValue(this.imageUrl.value)));
            }
            else {
                const name = [
                    moduleId,
                    documentId,
                    this.value.name
                ]
                    .join('-');
                return from(this.storage.upload(name, this.value, {
                    contentType: this.value.type,
                    customMetadata: Object.assign({ moduleId,
                        documentId }, (this.cData.generatedImages &&
                        formatGeneratedImages(this.cData.generatedImages)))
                })).pipe(switchMap((res) => res.ref.getDownloadURL()), tap(url => this.cData.control.setValue(url)));
            }
        }
        else {
            this.cData.control.setValue(this.imageUrl.value);
            return of({});
        }
    }
}
ImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-image',
                template: "<mat-form-field appearance=\"outline\" class=\"w-full\">\n  <mat-label>{{(cData.label || '') | transloco}}</mat-label>\n  <input\n    matInput\n    type=\"url\"\n    [placeholder]=\"(cData.placeholder || '') | transloco\"\n    [class.disabled]=\"disInput\"\n    [formControl]=\"imageUrl\">\n  <div matSuffix class=\"fb-image-suffix\">\n    <ng-container *ngIf=\"imageUrl.value\">\n      <div class=\"fb-image-suffix-preview\">\n        <button class=\"fb-image-suffix-preview-button\" mat-icon-button>\n          <mat-icon>visibility</mat-icon>\n        </button>\n        <img class=\"fb-image-suffix-preview-image\" [attr.src]=\"imageSrc || imageUrl.value || value\" [alt]=\"'FIELDS.IMAGE.PREVIEW' | transloco\">\n      </div>\n    </ng-container>\n    <button mat-icon-button *ngIf=\"!imageUrl.value && !cData.preventServerUpload\">\n      <mat-icon (click)=\"openFileUpload()\">perm_media</mat-icon>\n    </button>\n    <button mat-icon-button *ngIf=\"imageUrl.value\">\n      <mat-icon (click)=\"remove()\">highlight_off</mat-icon>\n    </button>\n  </div>\n  <mat-hint *ngIf=\"cData.hint\" [innerHTML]=\"cData.hint | jpSanitize\"></mat-hint>\n</mat-form-field>\n\n<input #file type=\"file\" hidden (change)=\"filesImage($event)\">\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".fb-image-suffix{display:flex}.fb-image-suffix-preview{display:inline-block;position:relative}.fb-image-suffix-preview-image{-o-object-fit:contain;background:#fff;box-shadow:0 2px 5px 0 rgba(0,0,0,.4);height:200px;max-width:unset;object-fit:contain;opacity:0;position:absolute;right:0;top:100%;transition:.2s;visibility:hidden;width:200px;z-index:2}.fb-image-suffix-preview-button:hover+.fb-image-suffix-preview-image{opacity:1;visibility:visible}"]
            },] }
];
ImageComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_DATA,] }] },
    { type: StorageService },
    { type: ChangeDetectorRef },
    { type: FormBuilderService },
    { type: TranslocoService },
    { type: MatSnackBar },
    { type: DomSanitizer }
];
ImageComponent.propDecorators = {
    fileEl: [{ type: ViewChild, args: ['file', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,