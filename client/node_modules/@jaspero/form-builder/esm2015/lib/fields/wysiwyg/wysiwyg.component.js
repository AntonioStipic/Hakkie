import { ChangeDetectionStrategy, Component, Inject, ViewChild } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { filter, take } from 'rxjs/operators';
import { FieldComponent } from '../../field/field.component';
import 'tinymce/plugins/code';
import 'tinymce/plugins/print';
import 'tinymce/plugins/wordcount';
import 'tinymce/plugins/link';
import 'tinymce/plugins/image';
import 'tinymce/plugins/imagetools';
import 'tinymce/plugins/fullscreen';
import 'tinymce/plugins/lists';
import 'tinymce/plugins/autolink';
import 'tinymce/plugins/advlist';
import 'tinymce/plugins/table';
import { FormBuilderComponent } from '../../form-builder.component';
import { StorageService } from '../../services/storage.service';
import { COMPONENT_DATA } from '../../utils/create-component-injector';
export class WysiwygComponent extends FieldComponent {
    constructor(cData, fb, dialog, storage, formBuilderComponent) {
        super(cData);
        this.cData = cData;
        this.fb = fb;
        this.dialog = dialog;
        this.storage = storage;
        this.formBuilderComponent = formBuilderComponent;
        this.ytDefault = {
            fullWidth: true,
            showPlayerControls: true,
            privacyEnhancedMode: false,
            align: 'left'
        };
    }
    ngOnInit() {
        this.ytForm = this.fb.group(Object.assign({ value: ['', Validators.required] }, this.ytDefault));
        this.cData.control.statusChanges.subscribe(value => {
            if (value === 'DISABLED') {
                tinymce.activeEditor.getBody().setAttribute('readonly', true);
            }
            else if (this.cData.control.disabled) {
                tinymce.activeEditor.getBody().setAttribute('readonly', false);
            }
        });
    }
    ngAfterViewInit() {
        this.registerTiny();
    }
    registerTiny() {
        tinymce.init({
            target: this.textarea.nativeElement,
            branding: false,
            height: this.cData.height || 420,
            plugins: [
                'code',
                'print',
                'wordcount',
                'link',
                'lists',
                'advlist',
                'autolink',
                'image',
                'imagetools',
                'fullscreen',
                'table'
            ],
            menubar: this.cData.menubar || 'edit insert view format table tools help',
            image_advtab: true,
            /**
             * Link settings
             */
            default_link_target: '_blank',
            readonly: this.cData.control.disabled,
            toolbar: this.cData.toolbar || [
                'undo redo',
                'insert',
                'styleselect',
                'bold italic',
                'forecolor backcolor',
                'alignleft aligncenter alignright alignjustify',
                'bullist numlist outdent indent',
                'link',
                'image',
                'youTube',
                'fullscreen',
            ].join(' | '),
            images_upload_handler: (blobInfo, success, failure) => {
                this.storage
                    .upload(blobInfo.filename(), blobInfo.blob(), this.formBuilderComponent.id ? {
                    customMetadata: {
                        collection: this.formBuilderComponent.id
                    }
                } : {})
                    .then((data) => data.ref.getDownloadURL())
                    .then((url) => success(url))
                    .catch((error) => failure(error.toString()));
            },
            setup: (editor) => {
                this.editor = editor;
                editor.on('keyup change', () => {
                    const tinyContent = editor.getContent();
                    this.cData.control.setValue(tinyContent);
                });
                editor.ui.registry.addButton('youTube', {
                    type: 'button',
                    icon: 'embed',
                    tooltip: 'Embed youtube video',
                    onAction: () => {
                        this.ytForm.reset(this.ytDefault);
                        this.dialog
                            .open(this.youTubeDialogTemplate, { width: '500px' })
                            .afterClosed()
                            .pipe(filter(value => !!value), take(1))
                            .subscribe(() => {
                            const data = this.ytForm.getRawValue();
                            let url = data.privacyEnhancedMode
                                ? 'https://www.youtube-nocookie.com/embed/'
                                : 'https://www.youtube.com/embed/';
                            url = url + data.value;
                            if (!data.showPlayerControls) {
                                data.value += '?controls=0';
                            }
                            const iframe = `<iframe width="560" height="315" src="${url}" frameborder="0"
                    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                            editor.insertContent(data.fullWidth
                                ? `<div class="evw-full" style="text-align: ${data.align}">${iframe}</div>`
                                : `<div style="text-align: ${data.align}">${iframe}</div>`);
                        });
                    }
                });
            }
        });
    }
}
WysiwygComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-wysiwyg',
                template: "<div class=\"mat-form-field-wrapper\">\n  <p class=\"fs-small fg-secondary\" *ngIf=\"cData.label\">{{(cData.label || '') | transloco}}</p>\n  <textarea #textarea role=\"textarea\">{{cData.control.value}}</textarea>\n</div>\n\n<ng-template #youTubeDialog>\n  <h1 mat-dialog-title>{{'FIELDS.WYSIWYG.EMBED_YOUTUBE' | transloco}}</h1>\n\n  <form [formGroup]=\"ytForm\">\n    <mat-dialog-content>\n      <mat-form-field class=\"w-full\">\n        <mat-label>{{'FIELDS.WYSIWYG.VIDEO_ID' | transloco}}</mat-label>\n        <input matInput formControlName=\"value\">\n      </mat-form-field>\n\n      <label class=\"mat-form-field-wrapper flex jc-between\">\n        <span>{{'FIELDS.WYSIWYG.FULL_WIDTH' | transloco}}</span>\n        <mat-slide-toggle formControlName=\"fullWidth\"></mat-slide-toggle>\n      </label>\n\n      <label class=\"mat-form-field-wrapper flex jc-between\">\n        <span>{{'FIELDS.WYSIWYG.SHOW_PLAYER_CONTROLS' | transloco}}</span>\n        <mat-slide-toggle formControlName=\"showPlayerControls\"></mat-slide-toggle>\n      </label>\n\n      <label class=\"mat-form-field-wrapper flex jc-between\">\n        <span>{{'FIELDS.WYSIWYG.PRIVACY_ENHANCED_MODE' | transloco}}</span>\n        <mat-slide-toggle formControlName=\"privacyEnhancedMode\"></mat-slide-toggle>\n      </label>\n\n      <mat-form-field class=\"w-full\">\n        <mat-label>{{'FIELDS.WYSIWYG.ALIGNMENT' | transloco}}</mat-label>\n        <mat-select formControlName=\"align\">\n          <mat-option value=\"left\">{{'FIELDS.WYSIWYG.LEFT' | transloco}}</mat-option>\n          <mat-option value=\"center\">{{'FIELDS.WYSIWYG.CENTER' | transloco}}</mat-option>\n          <mat-option value=\"right\">{{'FIELDS.WYSIWYG.RIGHT' | transloco}}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </mat-dialog-content>\n\n    <mat-dialog-actions class=\"jc-end\">\n      <button mat-button mat-dialog-close>{{'GENERAL.CLOSE' | transloco}}</button>\n      <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"true\">{{'GENERAL.SAVE' | transloco}}</button>\n    </mat-dialog-actions>\n  </form>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            },] }
];
WysiwygComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_DATA,] }] },
    { type: FormBuilder },
    { type: MatDialog },
    { type: StorageService },
    { type: FormBuilderComponent }
];
WysiwygComponent.propDecorators = {
    textarea: [{ type: ViewChild, args: ['textarea', { static: true },] }],
    youTubeDialogTemplate: [{ type: ViewChild, args: ['youTubeDialog', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3lzaXd5Zy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb3JtLWJ1aWxkZXIvc3JjL2xpYi9maWVsZHMvd3lzaXd5Zy93eXNpd3lnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxNQUFNLEVBR04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQWEsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLDJCQUEyQixDQUFDO0FBQ25DLE9BQU8sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8seUJBQXlCLENBQUM7QUFDakMsT0FBTyx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDOUQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBZ0JyRSxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsY0FBMkI7SUFFL0QsWUFDaUMsS0FBa0IsRUFDekMsRUFBZSxFQUNmLE1BQWlCLEVBQ2pCLE9BQXVCLEVBQ3ZCLG9CQUEwQztRQUVsRCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFOa0IsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQUN6QyxPQUFFLEdBQUYsRUFBRSxDQUFhO1FBQ2YsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBYXBELGNBQVMsR0FBRztZQUNWLFNBQVMsRUFBRSxJQUFJO1lBQ2Ysa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixtQkFBbUIsRUFBRSxLQUFLO1lBQzFCLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQztJQWZGLENBQUM7SUFpQkQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLGlCQUN6QixLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUM3QixJQUFJLENBQUMsU0FBUyxFQUNqQixDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRCxJQUFJLEtBQUssS0FBSyxVQUFVLEVBQUU7Z0JBQ3hCLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMvRDtpQkFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtnQkFDdEMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2hFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sWUFBWTtRQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ1gsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYTtZQUNuQyxRQUFRLEVBQUUsS0FBSztZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxHQUFHO1lBQ2hDLE9BQU8sRUFBRTtnQkFDUCxNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsV0FBVztnQkFDWCxNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsU0FBUztnQkFDVCxVQUFVO2dCQUNWLE9BQU87Z0JBQ1AsWUFBWTtnQkFDWixZQUFZO2dCQUNaLE9BQU87YUFDUjtZQUNELE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSwwQ0FBMEM7WUFDekUsWUFBWSxFQUFFLElBQUk7WUFFbEI7O2VBRUc7WUFDSCxtQkFBbUIsRUFBRSxRQUFRO1lBQzdCLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRO1lBQ3JDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSTtnQkFDN0IsV0FBVztnQkFDWCxRQUFRO2dCQUNSLGFBQWE7Z0JBQ2IsYUFBYTtnQkFDYixxQkFBcUI7Z0JBQ3JCLCtDQUErQztnQkFDL0MsZ0NBQWdDO2dCQUNoQyxNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsU0FBUztnQkFDVCxZQUFZO2FBQ2IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBRWIscUJBQXFCLEVBQUUsQ0FBQyxRQUFhLEVBQUUsT0FBWSxFQUFFLE9BQVksRUFBRSxFQUFFO2dCQUNuRSxJQUFJLENBQUMsT0FBTztxQkFDVCxNQUFNLENBQ0wsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUNuQixRQUFRLENBQUMsSUFBSSxFQUFFLEVBQ2YsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLGNBQWMsRUFBRTt3QkFDZCxVQUFVLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7cUJBQ3pDO2lCQUNGLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDUDtxQkFDQSxJQUFJLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7cUJBQzlDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNoQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RELENBQUM7WUFFRCxLQUFLLEVBQUUsQ0FBQyxNQUFXLEVBQUUsRUFBRTtnQkFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBRXJCLE1BQU0sQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtvQkFDN0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzNDLENBQUMsQ0FBQyxDQUFDO2dCQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUU7b0JBQ3RDLElBQUksRUFBRSxRQUFRO29CQUNkLElBQUksRUFBRSxPQUFPO29CQUNiLE9BQU8sRUFBRSxxQkFBcUI7b0JBQzlCLFFBQVEsRUFBRSxHQUFHLEVBQUU7d0JBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUNsQyxJQUFJLENBQUMsTUFBTTs2QkFDUixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBQyxDQUFDOzZCQUNsRCxXQUFXLEVBQUU7NkJBQ2IsSUFBSSxDQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDeEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSOzZCQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUU7NEJBQ2QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQzs0QkFDdkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQjtnQ0FDaEMsQ0FBQyxDQUFDLHlDQUF5QztnQ0FDM0MsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDOzRCQUVyQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NEJBRXZCLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0NBQzVCLElBQUksQ0FBQyxLQUFLLElBQUksYUFBYSxDQUFDOzZCQUM3Qjs0QkFFRCxNQUFNLE1BQU0sR0FBRyx5Q0FBeUMsR0FBRzs4SEFDbUQsQ0FBQzs0QkFFL0csTUFBTSxDQUFDLGFBQWEsQ0FDbEIsSUFBSSxDQUFDLFNBQVM7Z0NBQ1osQ0FBQyxDQUFDLDRDQUE0QyxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sUUFBUTtnQ0FDM0UsQ0FBQyxDQUFDLDJCQUEyQixJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sUUFBUSxDQUM3RCxDQUFDO3dCQUNKLENBQUMsQ0FBQyxDQUFDO29CQUNQLENBQUM7aUJBQ0YsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTFKRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLGdsRUFBdUM7Z0JBRXZDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7OzRDQUlJLE1BQU0sU0FBQyxjQUFjO1lBckNsQixXQUFXO1lBQ1gsU0FBUztZQWdCVCxjQUFjO1lBRmQsb0JBQW9COzs7dUJBK0J6QixTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQztvQ0FHcEMsU0FBUyxTQUFDLGVBQWUsRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbmplY3QsXG4gIE9uSW5pdCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtNYXREaWFsb2d9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQge2ZpbHRlciwgdGFrZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtGaWVsZENvbXBvbmVudH0gZnJvbSAnLi4vLi4vZmllbGQvZmllbGQuY29tcG9uZW50JztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2NvZGUnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvcHJpbnQnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvd29yZGNvdW50JztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2xpbmsnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvaW1hZ2UnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvaW1hZ2V0b29scyc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9mdWxsc2NyZWVuJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2xpc3RzJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2F1dG9saW5rJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL2Fkdmxpc3QnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvdGFibGUnO1xuaW1wb3J0IHtGb3JtQnVpbGRlckNvbXBvbmVudH0gZnJvbSAnLi4vLi4vZm9ybS1idWlsZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0ZpZWxkRGF0YX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9maWVsZC1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQge1N0b3JhZ2VTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHtDT01QT05FTlRfREFUQX0gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlLWNvbXBvbmVudC1pbmplY3Rvcic7XG5cbmRlY2xhcmUgY29uc3QgdGlueW1jZTogYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIFd5c2l3eWdEYXRhIGV4dGVuZHMgRmllbGREYXRhIHtcbiAgbWVudWJhcj86IHN0cmluZztcbiAgdG9vbGJhcj86IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmYi13eXNpd3lnJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3d5c2l3eWcuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi93eXNpd3lnLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFd5c2l3eWdDb21wb25lbnQgZXh0ZW5kcyBGaWVsZENvbXBvbmVudDxXeXNpd3lnRGF0YT5cbiAgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KENPTVBPTkVOVF9EQVRBKSBwdWJsaWMgY0RhdGE6IFd5c2l3eWdEYXRhLFxuICAgIHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyLFxuICAgIHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2csXG4gICAgcHJpdmF0ZSBzdG9yYWdlOiBTdG9yYWdlU2VydmljZSxcbiAgICBwcml2YXRlIGZvcm1CdWlsZGVyQ29tcG9uZW50OiBGb3JtQnVpbGRlckNvbXBvbmVudFxuICApIHtcbiAgICBzdXBlcihjRGF0YSk7XG4gIH1cblxuICBAVmlld0NoaWxkKCd0ZXh0YXJlYScsIHtzdGF0aWM6IHRydWV9KVxuICB0ZXh0YXJlYTogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkKCd5b3VUdWJlRGlhbG9nJywge3N0YXRpYzogdHJ1ZX0pXG4gIHlvdVR1YmVEaWFsb2dUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBlZGl0b3I6IGFueTtcbiAgeXRGb3JtOiBGb3JtR3JvdXA7XG4gIHl0RGVmYXVsdCA9IHtcbiAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgc2hvd1BsYXllckNvbnRyb2xzOiB0cnVlLFxuICAgIHByaXZhY3lFbmhhbmNlZE1vZGU6IGZhbHNlLFxuICAgIGFsaWduOiAnbGVmdCdcbiAgfTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnl0Rm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xuICAgICAgdmFsdWU6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAuLi50aGlzLnl0RGVmYXVsdFxuICAgIH0pO1xuXG4gICAgdGhpcy5jRGF0YS5jb250cm9sLnN0YXR1c0NoYW5nZXMuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ0RJU0FCTEVEJykge1xuICAgICAgICB0aW55bWNlLmFjdGl2ZUVkaXRvci5nZXRCb2R5KCkuc2V0QXR0cmlidXRlKCdyZWFkb25seScsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmNEYXRhLmNvbnRyb2wuZGlzYWJsZWQpIHtcbiAgICAgICAgdGlueW1jZS5hY3RpdmVFZGl0b3IuZ2V0Qm9keSgpLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yZWdpc3RlclRpbnkoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJUaW55KCkge1xuICAgIHRpbnltY2UuaW5pdCh7XG4gICAgICB0YXJnZXQ6IHRoaXMudGV4dGFyZWEubmF0aXZlRWxlbWVudCxcbiAgICAgIGJyYW5kaW5nOiBmYWxzZSxcbiAgICAgIGhlaWdodDogdGhpcy5jRGF0YS5oZWlnaHQgfHwgNDIwLFxuICAgICAgcGx1Z2luczogW1xuICAgICAgICAnY29kZScsXG4gICAgICAgICdwcmludCcsXG4gICAgICAgICd3b3JkY291bnQnLFxuICAgICAgICAnbGluaycsXG4gICAgICAgICdsaXN0cycsXG4gICAgICAgICdhZHZsaXN0JyxcbiAgICAgICAgJ2F1dG9saW5rJyxcbiAgICAgICAgJ2ltYWdlJyxcbiAgICAgICAgJ2ltYWdldG9vbHMnLFxuICAgICAgICAnZnVsbHNjcmVlbicsXG4gICAgICAgICd0YWJsZSdcbiAgICAgIF0sXG4gICAgICBtZW51YmFyOiB0aGlzLmNEYXRhLm1lbnViYXIgfHwgJ2VkaXQgaW5zZXJ0IHZpZXcgZm9ybWF0IHRhYmxlIHRvb2xzIGhlbHAnLFxuICAgICAgaW1hZ2VfYWR2dGFiOiB0cnVlLFxuXG4gICAgICAvKipcbiAgICAgICAqIExpbmsgc2V0dGluZ3NcbiAgICAgICAqL1xuICAgICAgZGVmYXVsdF9saW5rX3RhcmdldDogJ19ibGFuaycsXG4gICAgICByZWFkb25seTogdGhpcy5jRGF0YS5jb250cm9sLmRpc2FibGVkLFxuICAgICAgdG9vbGJhcjogdGhpcy5jRGF0YS50b29sYmFyIHx8IFtcbiAgICAgICAgJ3VuZG8gcmVkbycsXG4gICAgICAgICdpbnNlcnQnLFxuICAgICAgICAnc3R5bGVzZWxlY3QnLFxuICAgICAgICAnYm9sZCBpdGFsaWMnLFxuICAgICAgICAnZm9yZWNvbG9yIGJhY2tjb2xvcicsXG4gICAgICAgICdhbGlnbmxlZnQgYWxpZ25jZW50ZXIgYWxpZ25yaWdodCBhbGlnbmp1c3RpZnknLFxuICAgICAgICAnYnVsbGlzdCBudW1saXN0IG91dGRlbnQgaW5kZW50JyxcbiAgICAgICAgJ2xpbmsnLFxuICAgICAgICAnaW1hZ2UnLFxuICAgICAgICAneW91VHViZScsXG4gICAgICAgICdmdWxsc2NyZWVuJyxcbiAgICAgIF0uam9pbignIHwgJyksXG5cbiAgICAgIGltYWdlc191cGxvYWRfaGFuZGxlcjogKGJsb2JJbmZvOiBhbnksIHN1Y2Nlc3M6IGFueSwgZmFpbHVyZTogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmFnZVxuICAgICAgICAgIC51cGxvYWQoXG4gICAgICAgICAgICBibG9iSW5mby5maWxlbmFtZSgpLFxuICAgICAgICAgICAgYmxvYkluZm8uYmxvYigpLFxuICAgICAgICAgICAgdGhpcy5mb3JtQnVpbGRlckNvbXBvbmVudC5pZCA/IHtcbiAgICAgICAgICAgICAgY3VzdG9tTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLmZvcm1CdWlsZGVyQ29tcG9uZW50LmlkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gOiB7fVxuICAgICAgICAgIClcbiAgICAgICAgICAudGhlbigoZGF0YTogYW55KSA9PiBkYXRhLnJlZi5nZXREb3dubG9hZFVSTCgpKVxuICAgICAgICAgIC50aGVuKCh1cmw6IGFueSkgPT4gc3VjY2Vzcyh1cmwpKVxuICAgICAgICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gZmFpbHVyZShlcnJvci50b1N0cmluZygpKSk7XG4gICAgICB9LFxuXG4gICAgICBzZXR1cDogKGVkaXRvcjogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuXG4gICAgICAgIGVkaXRvci5vbigna2V5dXAgY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRpbnlDb250ZW50ID0gZWRpdG9yLmdldENvbnRlbnQoKTtcbiAgICAgICAgICB0aGlzLmNEYXRhLmNvbnRyb2wuc2V0VmFsdWUodGlueUNvbnRlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBlZGl0b3IudWkucmVnaXN0cnkuYWRkQnV0dG9uKCd5b3VUdWJlJywge1xuICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgIGljb246ICdlbWJlZCcsXG4gICAgICAgICAgdG9vbHRpcDogJ0VtYmVkIHlvdXR1YmUgdmlkZW8nLFxuICAgICAgICAgIG9uQWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnl0Rm9ybS5yZXNldCh0aGlzLnl0RGVmYXVsdCk7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZ1xuICAgICAgICAgICAgICAub3Blbih0aGlzLnlvdVR1YmVEaWFsb2dUZW1wbGF0ZSwge3dpZHRoOiAnNTAwcHgnfSlcbiAgICAgICAgICAgICAgLmFmdGVyQ2xvc2VkKClcbiAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKHZhbHVlID0+ICEhdmFsdWUpLFxuICAgICAgICAgICAgICAgIHRha2UoMSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy55dEZvcm0uZ2V0UmF3VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gZGF0YS5wcml2YWN5RW5oYW5jZWRNb2RlXG4gICAgICAgICAgICAgICAgICA/ICdodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbS9lbWJlZC8nXG4gICAgICAgICAgICAgICAgICA6ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nO1xuXG4gICAgICAgICAgICAgICAgdXJsID0gdXJsICsgZGF0YS52YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5zaG93UGxheWVyQ29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgKz0gJz9jb250cm9scz0wJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpZnJhbWUgPSBgPGlmcmFtZSB3aWR0aD1cIjU2MFwiIGhlaWdodD1cIjMxNVwiIHNyYz1cIiR7dXJsfVwiIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgICAgICAgIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmVcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+YDtcblxuICAgICAgICAgICAgICAgIGVkaXRvci5pbnNlcnRDb250ZW50KFxuICAgICAgICAgICAgICAgICAgZGF0YS5mdWxsV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgPyBgPGRpdiBjbGFzcz1cImV2dy1mdWxsXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiAke2RhdGEuYWxpZ259XCI+JHtpZnJhbWV9PC9kaXY+YFxuICAgICAgICAgICAgICAgICAgICA6IGA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogJHtkYXRhLmFsaWdufVwiPiR7aWZyYW1lfTwvZGl2PmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=