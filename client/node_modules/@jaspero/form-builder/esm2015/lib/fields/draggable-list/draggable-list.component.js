import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FieldComponent } from '../../field/field.component';
export class DraggableListComponent extends FieldComponent {
    ngOnInit() {
        if (this.cData.control.value.length) {
            this.cData.options.sort((optionOne, optionTwo) => {
                const indexOne = this.cData.control.value.indexOf(optionOne);
                const indexTwo = this.cData.control.value.indexOf(optionTwo);
                return indexTwo - indexOne;
            });
        }
    }
    drop(event) {
        moveItemInArray(this.cData.options, event.previousIndex, event.currentIndex);
        this.cData.control.setValue(this.cData.options.map(val => {
            return val.value;
        }));
    }
}
DraggableListComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-draggable-list',
                template: "<div class=\"mat-form-field-wrapper\">\n  <p class=\"fs-small fg-secondary\" *ngIf=\"cData.label\">{{cData.label | transloco}}</p>\n\n  <div\n    class=\"fb-draggable-list\"\n    cdkDropList\n    (cdkDropListDropped)=\"drop($event)\">\n    <div\n      class=\"fb-draggable-list-item\"\n      *ngFor=\"let item of cData.options; index as index\"\n      [cdkDragDisabled]=\"item.disabled\"\n      cdkDrag>\n      {{index + 1}}. {{item.name}}\n    </div>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".fb-draggable-list{border:1px solid var(--panel-tertiary);border-radius:4px;overflow:hidden}.fb-draggable-list-item{align-items:center;background:var(--panel-theme);border-bottom:1px solid var(--panel-tertiary);cursor:move;display:flex;padding:20px 10px}.fb-draggable-list-item:last-child{border:none}.cdk-drag-preview{border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating,.fb-draggable-list.cdk-drop-list-dragging .fb-draggable-list-item:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9ybS1idWlsZGVyL3NyYy9saWIvZmllbGRzL2RyYWdnYWJsZS1saXN0L2RyYWdnYWJsZS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDcEUsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFjM0QsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGNBQXdCO0lBRWxFLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM3RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM3RCxPQUFPLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxJQUFJLENBQUMsS0FBNEI7UUFDL0IsZUFBZSxDQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUNsQixLQUFLLENBQUMsYUFBYSxFQUNuQixLQUFLLENBQUMsWUFBWSxDQUNuQixDQUFDO1FBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUE5QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLG1lQUE4QztnQkFFOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDZGtEcmFnRHJvcCwgbW92ZUl0ZW1JbkFycmF5fSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RmllbGRDb21wb25lbnR9IGZyb20gJy4uLy4uL2ZpZWxkL2ZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQge0ZpZWxkRGF0YX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9maWVsZC1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQge09wdGlvbn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9vcHRpb24uaW50ZXJmYWNlJztcblxuaW50ZXJmYWNlIERyYWdEYXRhIGV4dGVuZHMgRmllbGREYXRhIHtcbiAgb3B0aW9uczogT3B0aW9uW107XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZiLWRyYWdnYWJsZS1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RyYWdnYWJsZS1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZHJhZ2dhYmxlLWxpc3QuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRHJhZ2dhYmxlTGlzdENvbXBvbmVudCBleHRlbmRzIEZpZWxkQ29tcG9uZW50PERyYWdEYXRhPlxuICBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmNEYXRhLmNvbnRyb2wudmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLmNEYXRhLm9wdGlvbnMuc29ydCgob3B0aW9uT25lLCBvcHRpb25Ud28pID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXhPbmUgPSB0aGlzLmNEYXRhLmNvbnRyb2wudmFsdWUuaW5kZXhPZihvcHRpb25PbmUpO1xuICAgICAgICBjb25zdCBpbmRleFR3byA9IHRoaXMuY0RhdGEuY29udHJvbC52YWx1ZS5pbmRleE9mKG9wdGlvblR3byk7XG4gICAgICAgIHJldHVybiBpbmRleFR3byAtIGluZGV4T25lO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZHJvcChldmVudDogQ2RrRHJhZ0Ryb3A8c3RyaW5nW10+KSB7XG4gICAgbW92ZUl0ZW1JbkFycmF5KFxuICAgICAgdGhpcy5jRGF0YS5vcHRpb25zLFxuICAgICAgZXZlbnQucHJldmlvdXNJbmRleCxcbiAgICAgIGV2ZW50LmN1cnJlbnRJbmRleFxuICAgICk7XG5cbiAgICB0aGlzLmNEYXRhLmNvbnRyb2wuc2V0VmFsdWUoXG4gICAgICB0aGlzLmNEYXRhLm9wdGlvbnMubWFwKHZhbCA9PiB7XG4gICAgICAgIHJldHVybiB2YWwudmFsdWU7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==