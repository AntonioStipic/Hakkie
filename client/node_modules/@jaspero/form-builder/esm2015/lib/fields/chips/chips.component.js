import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FieldComponent } from '../../field/field.component';
import { getHsd } from '../../utils/get-hsd';
export class ChipsComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.data = [];
    }
    ngOnInit() {
        this.data = this.cData.control.value;
        this.removable = this.cData.hasOwnProperty('removable') ? this.cData.removable : true;
        this.prefix$ = getHsd('prefix', this.cData);
        this.suffix$ = getHsd('suffix', this.cData);
    }
    add(event) {
        const value = (event.value || '').trim();
        const input = event.input;
        if (value && (this.cData.unique ? !this.data.includes(value) : true)) {
            this.data.push(value);
            this.cData.control.setValue(this.data);
        }
        if (input) {
            input.value = '';
        }
    }
    remove(chip) {
        const index = this.cData.control.value.indexOf(chip);
        if (index >= 0) {
            this.data.splice(index, 1);
            this.cData.control.setValue(this.data);
        }
    }
}
ChipsComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-chips',
                template: "<mat-form-field class=\"w-full\" appearance=\"outline\">\n  <mat-label>{{(cData.label || '') | transloco}}</mat-label>\n  <mat-chip-list #chipList>\n    <mat-chip\n      *ngFor=\"let chip of data\"\n      [selectable]=\"cData.selectable\"\n      [removable]=\"removable\"\n      (removed)=\"remove(chip)\">\n      {{chip}}\n      <mat-icon *ngIf=\"removable\" matChipRemove>cancel</mat-icon>\n    </mat-chip>\n    <input\n      matInput\n      [attr.autocomplete]=\"cData.autocomplete || 'on'\"\n      [placeholder]=\"(cData.placeholder || '') | transloco\"\n      (matChipInputTokenEnd)=\"add($event)\"\n      [matChipInputFor]=\"chipList\">\n  </mat-chip-list>\n  <span *ngIf=\"cData.suffix\" matSuffix [innerHTML]=\"((suffix$ | async) || '') | jpSanitize\"></span>\n  <span *ngIf=\"cData.prefix\" matPrefix [innerHTML]=\"((prefix$ | async) || '') | jpSanitize\"></span>\n  <mat-hint *ngIf=\"cData.hint\" [innerHTML]=\"cData.hint | jpSanitize\"></mat-hint>\n</mat-form-field>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9ybS1idWlsZGVyL3NyYy9saWIvZmllbGRzL2NoaXBzL2NoaXBzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBR3pFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUUzRCxPQUFPLEVBQUMsTUFBTSxFQUFNLE1BQU0scUJBQXFCLENBQUM7QUFrQmhELE1BQU0sT0FBTyxjQUFlLFNBQVEsY0FBeUI7SUFON0Q7O1FBU0UsU0FBSSxHQUFhLEVBQUUsQ0FBQztJQWtDdEIsQ0FBQztJQTdCQyxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN0RixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUF3QjtRQUMxQixNQUFNLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUUxQixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsSUFBSSxLQUFLLEVBQUU7WUFDVCxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJELElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7O1lBMUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsKzlCQUFxQztnQkFFckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNYXRDaGlwSW5wdXRFdmVudH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY2hpcHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7RmllbGRDb21wb25lbnR9IGZyb20gJy4uLy4uL2ZpZWxkL2ZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQge0ZpZWxkRGF0YX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9maWVsZC1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQge2dldEhzZCwgSFNEfSBmcm9tICcuLi8uLi91dGlscy9nZXQtaHNkJztcblxuaW50ZXJmYWNlIENoaXBzRGF0YSBleHRlbmRzIEZpZWxkRGF0YSB7XG4gIHNlbGVjdGFibGU6IGJvb2xlYW47XG4gIHJlbW92YWJsZTogYm9vbGVhbjtcbiAgYWRkT25CbHVyOiBib29sZWFuO1xuICB1bmlxdWU6IGJvb2xlYW47XG4gIGF1dG9jb21wbGV0ZT86IHN0cmluZztcbiAgc3VmZml4PzogSFNEO1xuICBwcmVmaXg/OiBIU0Q7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZiLWNoaXBzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NoaXBzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2hpcHMuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2hpcHNDb21wb25lbnQgZXh0ZW5kcyBGaWVsZENvbXBvbmVudDxDaGlwc0RhdGE+XG4gIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBkYXRhOiBzdHJpbmdbXSA9IFtdO1xuICByZW1vdmFibGU6IGJvb2xlYW47XG4gIHByZWZpeCQ6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgc3VmZml4JDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZGF0YSA9IHRoaXMuY0RhdGEuY29udHJvbC52YWx1ZTtcbiAgICB0aGlzLnJlbW92YWJsZSA9IHRoaXMuY0RhdGEuaGFzT3duUHJvcGVydHkoJ3JlbW92YWJsZScpID8gdGhpcy5jRGF0YS5yZW1vdmFibGUgOiB0cnVlO1xuICAgIHRoaXMucHJlZml4JCA9IGdldEhzZCgncHJlZml4JywgdGhpcy5jRGF0YSk7XG4gICAgdGhpcy5zdWZmaXgkID0gZ2V0SHNkKCdzdWZmaXgnLCB0aGlzLmNEYXRhKTtcbiAgfVxuXG4gIGFkZChldmVudDogTWF0Q2hpcElucHV0RXZlbnQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IChldmVudC52YWx1ZSB8fCAnJykudHJpbSgpO1xuICAgIGNvbnN0IGlucHV0ID0gZXZlbnQuaW5wdXQ7XG5cbiAgICBpZiAodmFsdWUgJiYgKHRoaXMuY0RhdGEudW5pcXVlID8gIXRoaXMuZGF0YS5pbmNsdWRlcyh2YWx1ZSkgOiB0cnVlKSkge1xuICAgICAgdGhpcy5kYXRhLnB1c2godmFsdWUpO1xuICAgICAgdGhpcy5jRGF0YS5jb250cm9sLnNldFZhbHVlKHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0KSB7XG4gICAgICBpbnB1dC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShjaGlwOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuY0RhdGEuY29udHJvbC52YWx1ZS5pbmRleE9mKGNoaXApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5jRGF0YS5jb250cm9sLnNldFZhbHVlKHRoaXMuZGF0YSk7XG4gICAgfVxuICB9XG59XG4iXX0=