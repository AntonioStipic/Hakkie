import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, ViewChild } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TranslocoService } from '@ngneat/transloco';
import { from, of, throwError } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { FieldComponent } from '../../field/field.component';
import { FormBuilderService } from '../../form-builder.service';
import { StorageService } from '../../services/storage.service';
import { COMPONENT_DATA } from '../../utils/create-component-injector';
import { formatFileName } from '../../utils/format-file-name';
import { parseSize } from '../../utils/parse-size';
export class FileComponent extends FieldComponent {
    constructor(cData, storage, cdr, formBuilderService, transloco, snackBar) {
        super(cData);
        this.cData = cData;
        this.storage = storage;
        this.cdr = cdr;
        this.formBuilderService = formBuilderService;
        this.transloco = transloco;
        this.snackBar = snackBar;
    }
    ngOnInit() {
        if (this.cData.control.value) {
            this.name = this.cData.control.value;
        }
        this.emptyLabel = (this.cData.hasOwnProperty('emptyLabel') ? this.cData.emptyLabel : 'FIELDS.FILE.EMPTY');
        this.formBuilderService.saveComponents.push(this);
        this.allowedFileTypes = this.cData.allowedFileTypes || [];
        this.forbiddenFileTypes = this.cData.forbiddenFileTypes || [];
        this.minSizeBytes = this.cData.minSize ? parseSize(this.cData.minSize) : 0;
        this.maxSizeBytes = this.cData.maxSize ? parseSize(this.cData.maxSize) : 0;
    }
    errorSnack(message = 'GENERAL.ERROR', dismiss = 'GENERAL.DISMISS') {
        this.snackBar.open(this.transloco.translate(message), this.transloco.translate(dismiss), {
            panelClass: 'snack-bar-error',
            duration: 5000
        });
    }
    fileChange(ev) {
        const el = ev.target;
        const file = Array.from(el.files)[0];
        Object.defineProperty(file, 'name', {
            writable: true,
            value: formatFileName(file.name)
        });
        if (!this.allowedFileTypes.includes(file.type) && !!this.allowedFileTypes.length) {
            this.errorSnack('FIELDS.FILE.INVALID_FILE_FORMAT');
            return throwError('Invalid File Format');
        }
        if (this.forbiddenFileTypes.includes(file.type)) {
            this.errorSnack('FIELDS.FILE.FORBIDDEN_FILE_FORMAT');
            return throwError('Forbidden File Format');
        }
        if (file.size < this.minSizeBytes) {
            this.errorSnack('FIELDS.FILE.BELOW_SIZE');
            return throwError('File below minimal allowed size');
        }
        if (file.size > this.maxSizeBytes && !!this.maxSizeBytes) {
            this.errorSnack('FIELDS.FILE.EXCEED_SIZE');
            return throwError('File exceeding allowed size');
        }
        this.value = file;
        if (this.value) {
            this.name = this.value.name;
        }
        el.value = '';
    }
    clear() {
        this.name = '';
        this.cData.control.setValue('');
    }
    save(moduleId, documentId) {
        if (this.value) {
            const name = [
                moduleId,
                documentId,
                this.value.name
            ]
                .join('-');
            return from(this.storage.upload(name, this.value, {
                contentType: this.value.type,
                customMetadata: {
                    moduleId,
                    documentId
                }
            })).pipe(switchMap((res) => res.ref.getDownloadURL()), tap(url => this.cData.control.setValue(url)));
        }
        else {
            return of({});
        }
    }
}
FileComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-file',
                template: "<div class=\"mat-form-field-wrapper\">\n  <fieldset class=\"fb-file\">\n    <input #file type=\"file\" hidden (change)=\"fileChange($event)\">\n\n    <legend class=\"fb-file-legend\">{{(cData.label || '') | transloco}}</legend>\n\n    <div class=\"fb-file-field\">\n      <span class=\"fb-file-field-name\">{{name || (emptyLabel | transloco)}}</span>\n\n      <div class=\"fb-file-field-actions\">\n        <ng-container *ngIf=\"!cData.preventClear && name\">\n          <button mat-button (click)=\"clear()\">{{'REMOVE' | transloco}}</button>|\n        </ng-container>\n        <button mat-button (click)=\"file.click()\">{{'ADD' | transloco}}</button>\n      </div>\n    </div>\n  </fieldset>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".fb-file{border:1px solid var(--panel-tertiary);border-radius:4px;overflow:hidden;transition:.2s}.fb-file:hover{border:1px solid var(--panel-primary);box-shadow:0 0 0 1px var(--panel-primary)}.fb-file:focus-within{border:1px solid var(--primary-theme);box-shadow:0 0 0 1px var(--primary-theme)}.fb-file-legend{background:var(--panel-theme);color:var(--panel-secondary);font-size:.8em;margin-left:-8px;padding:0 4px}.fb-file-field{align-items:center;display:flex}.fb-file-field-name{color:var(--panel-secondary);flex:1;min-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:1px}.fb-file-field-actions{margin-left:auto;white-space:nowrap}"]
            },] }
];
FileComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_DATA,] }] },
    { type: StorageService },
    { type: ChangeDetectorRef },
    { type: FormBuilderService },
    { type: TranslocoService },
    { type: MatSnackBar }
];
FileComponent.propDecorators = {
    fileEl: [{ type: ViewChild, args: ['file', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,