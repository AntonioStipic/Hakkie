import { CdkDropList, CdkDropListGroup, moveItemInArray } from '@angular/cdk/drag-drop';
import { ViewportRuler } from '@angular/cdk/overlay';
import { HttpClient } from '@angular/common/http';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Optional, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TranslocoService } from '@ngneat/transloco';
import { forkJoin, from, of, throwError } from 'rxjs';
import { catchError, map, switchMap, tap } from 'rxjs/operators';
import { FieldComponent } from '../../field/field.component';
import { FormBuilderService } from '../../form-builder.service';
import { StorageService } from '../../services/storage.service';
import { COMPONENT_DATA } from '../../utils/create-component-injector';
import { formatFileName } from '../../utils/format-file-name';
import { formatGeneratedImages } from '../../utils/format-generated-images';
import { parseSize } from '../../utils/parse-size';
import { STORAGE_URL } from '../../utils/storage-url';
import { switchItemLocations } from '../../utils/switch-item-locations';
import { readFile } from './read-file';
export class GalleryComponent extends FieldComponent {
    constructor(cData, storageUrl, dialog, cdr, http, storage, formBuilderService, viewportRuler, transloco, snackBar) {
        super(cData);
        this.cData = cData;
        this.storageUrl = storageUrl;
        this.dialog = dialog;
        this.cdr = cdr;
        this.http = http;
        this.storage = storage;
        this.formBuilderService = formBuilderService;
        this.viewportRuler = viewportRuler;
        this.transloco = transloco;
        this.snackBar = snackBar;
        this.files = [];
        this.toRemove = [];
    }
    ngOnInit() {
        this.formBuilderService.saveComponents.push(this);
        this.allowedImageTypes = this.cData.allowedImageTypes || [];
        this.forbiddenImageTypes = this.cData.forbiddenImageTypes || [];
        this.minSizeBytes = this.cData.minSize ? parseSize(this.cData.minSize) : 0;
        this.maxSizeBytes = this.cData.maxSize ? parseSize(this.cData.maxSize) : 0;
    }
    ngAfterViewInit() {
        const phElement = this.placeholder.element.nativeElement;
        const { parentElement } = phElement;
        phElement.style.display = 'none';
        parentElement.removeChild(phElement);
    }
    openUploadDialog() {
        this.dialog.open(this.modalTemplate, {
            width: '420px'
        });
    }
    addImage(image) {
        this.http
            .get(image, {
            withCredentials: false,
            responseType: 'blob'
        })
            .pipe(switchMap((blob) => {
            const type = blob.type.split('/')[1].toLowerCase();
            if (!this.allowedImageTypes.includes(type) && !!this.allowedImageTypes.length) {
                return throwError('Invalid Image Format');
            }
            if (this.forbiddenImageTypes.includes(type)) {
                return throwError('Forbidden Image Format');
            }
            if (blob.size < this.minSizeBytes) {
                return throwError('Image below minimal allowed size');
            }
            if (blob.size > this.maxSizeBytes && !!this.maxSizeBytes) {
                return throwError('Image exceeding allowed size');
            }
            return of(blob);
        }), this.formBuilderService.notify({
            error: 'FIELDS.GALLERY.UPLOAD_ERROR',
            success: null
        }))
            .subscribe(res => {
            const urlCreator = window.URL || window.webkitURL;
            const value = this.cData.control.value;
            value.push({
                data: urlCreator.createObjectURL(res),
                live: true
            });
            this.cData.control.setValue(value);
            this.cdr.detectChanges();
        });
    }
    openFileUpload() {
        this.fileEl.nativeElement.click();
    }
    openSortImages() {
        this.dialog.open(this.imagesSort, {
            width: '800px'
        });
    }
    drop(event) {
        const value = this.cData.control.value;
        switchItemLocations(value, event.previousIndex, event.currentIndex);
        this.cData.control.setValue(value);
        this.cdr.detectChanges();
    }
    move(up = false, index) {
        const currentIndex = up ? index - 1 : index + 1;
        const value = this.cData.control.value;
        moveItemInArray(value, index, currentIndex);
        this.cData.control.setValue(value);
        this.cdr.detectChanges();
    }
    errorSnack(message = 'GENERAL.ERROR', dismiss = 'GENERAL.DISMISS') {
        this.snackBar.open(this.transloco.translate(message), this.transloco.translate(dismiss), {
            panelClass: 'snack-bar-error',
            duration: 5000
        });
    }
    filesUploaded(el) {
        const files = Array.from((el instanceof FileList ? el : el.files));
        for (const file of files) {
            Object.defineProperty(file, 'name', {
                writable: true,
                value: formatFileName(file.name)
            });
            const type = file.type.split('/')[1].toLowerCase();
            if (!this.allowedImageTypes.includes(type) && !!this.allowedImageTypes.length) {
                this.errorSnack('FIELDS.GALLERY.INVALID_IMAGE_FORMAT');
                return throwError('Invalid Image Format');
            }
            if (this.forbiddenImageTypes.includes(type)) {
                this.errorSnack('FIELDS.GALLERY.FORBIDDEN_IMAGE_FORMAT');
                return throwError('Forbidden Image Format');
            }
            if (file.size < this.minSizeBytes) {
                this.errorSnack('FIELDS.GALLERY.BELOW_SIZE');
                return throwError('Image below minimal allowed size');
            }
            if (file.size > this.maxSizeBytes && !!this.maxSizeBytes) {
                this.errorSnack('FIELDS.GALLERY.EXCEED_SIZE');
                return throwError('Image exceeding allowed size');
            }
        }
        forkJoin(files.map(file => readFile(file).pipe(map(data => ({
            data,
            pushToLive: file,
            live: false
        }))))).subscribe(fls => {
            const value = this.cData.control.value;
            value.push(...fls);
            this.cData.control.setValue(value);
            if (!(el instanceof FileList)) {
                el.value = '';
            }
            this.cdr.detectChanges();
        }, () => {
            if (!(el instanceof FileList)) {
                el.value = '';
            }
        });
    }
    removeImage(index, item) {
        if (item.live && item.data.includes(this.storageUrl)) {
            this.toRemove.push(item.data);
        }
        this.cData.control.value.splice(index, 1);
    }
    sortDrop(event) {
        const value = this.cData.control.value;
        moveItemInArray(value, event.previousIndex, event.currentIndex);
        this.cData.control.setValue(value);
    }
    /**
     * Drag and Drop
     */
    dragMoved(e) {
        const point = this.getPointerPositionOnPage(e.event);
        this.listGroup._items.forEach(dropList => {
            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {
                this.activeContainer = dropList;
                return;
            }
        });
    }
    dropListDropped() {
        if (!this.target) {
            return;
        }
        const phElement = this.placeholder.element.nativeElement;
        const parent = phElement.parentElement;
        phElement.style.display = 'none';
        const { element } = this.source;
        parent.removeChild(phElement);
        parent.appendChild(phElement);
        parent.insertBefore(element.nativeElement, parent.children[this.sourceIndex]);
        this.target = null;
        this.source = null;
        if (this.sourceIndex !== this.targetIndex) {
            const value = this.cData.control.value;
            moveItemInArray(value, this.sourceIndex, this.targetIndex);
            this.cData.control.setValue(value);
        }
    }
    /** Determines the point of the page that was touched by the user. */
    getPointerPositionOnPage(event) {
        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.
        const point = __isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;
        const scrollPosition = this.viewportRuler.getViewportScrollPosition();
        return {
            x: point.pageX - scrollPosition.left,
            y: point.pageY - scrollPosition.top
        };
    }
    /**
     * Executes all uploads/removes to persist
     * the changes on server
     */
    save(moduleId, documentId) {
        if (!this.toRemove.length &&
            !this.cData.control.value ||
            !this.cData.control.value.find((val) => !val.live)) {
            return of([]);
        }
        return forkJoin([
            ...this.toRemove.map(file => from(this.storage.storage.refFromURL(file).delete()).pipe(
            /**
             * Dont' fail if files didn't delete
             */
            catchError(() => of([])))),
            ...this.cData.control.value.reduce((acc, cur) => {
                if (cur.live !== undefined && !cur.live) {
                    const name = [
                        moduleId,
                        documentId,
                        cur.pushToLive.name
                    ]
                        .join('-');
                    acc.push(from(this.storage.upload(name, cur.pushToLive, {
                        contentType: cur.pushToLive.type,
                        customMetadata: Object.assign({ moduleId,
                            documentId }, this.cData.generatedImages &&
                            formatGeneratedImages(this.cData.generatedImages))
                    })).pipe(switchMap((task) => task.ref.getDownloadURL()), tap(url => {
                        cur.data = url;
                    })));
                }
                else {
                    acc.push(cur);
                }
                return acc;
            }, [])
        ]).pipe(tap(() => this.cData.control.setValue(this.cData.control.value.map((item) => (item.data ? item.data : item)))));
    }
}
GalleryComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-gallery',
                template: "<p class=\"fs-small fg-secondary\" *ngIf=\"cData.label\">{{(cData.label || '') | transloco}}</p>\n\n<div class=\"fb-gallery\" fbDropzone (dropped)=\"filesUploaded($event)\">\n  <div class=\"ta-center p-y-l\">\n    <button mat-button *ngIf=\"cData.allowUrl\" (click)=\"openUploadDialog()\">{{'FIELDS.GALLERY.ENTER_URL' | transloco}}</button>\n    <button mat-button *ngIf=\"cData.allowServerUpload\" (click)=\"openFileUpload()\">{{'FIELDS.GALLERY.CHOOSE_FILES' | transloco}}</button>\n    <button mat-button *ngIf=\"cData.allowServerUpload\" (click)=\"openSortImages()\">{{'FIELDS.GALLERY.SORT_IMAGES' | transloco}}</button>\n  </div>\n\n  <!--Upload from disk-->\n  <input #file type=\"file\" multiple hidden (change)=\"filesUploaded($event.target)\">\n\n  <!--Uploaded images list-->\n  <ng-container>\n    <div class=\"fb-gallery-list\" cdkDropListGroup>\n\n      <div class=\"fb-gallery-list-placeholder\" cdkDropList (cdkDropListDropped)=\"dropListDropped()\"></div>\n\n      <div\n        cdkDropList\n        class=\"fb-gallery-list-image\"\n        (cdkDropListDropped)=\"dropListDropped()\"\n        *ngFor=\"let val of cData.control.value; index as index\">\n\n        <div cdkDrag (cdkDragMoved)=\"dragMoved($event);\">\n          <img class=\"fb-gallery-list-image-inner\" [src]=\"(val.data || val) | jpSanitize:'resourceUrl'\">\n          <button class=\"fb-gallery-list-image-remove\" type=\"button\" mat-icon-button [matTooltip]=\"'GENERAL.REMOVE' | transloco\" (click)=\"removeImage(index, val)\">\n            <mat-icon>close</mat-icon>\n          </button>\n        </div>\n\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<!--Uplaod from URL-->\n<ng-template #modal>\n  <mat-dialog-content>\n    <mat-form-field class=\"w-full\" appearance=\"outline\">\n      <mat-label>{{'FIELDS.GALLERY.IMAGE_URL' | transloco}}</mat-label>\n      <input matInput #url>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions class=\"jc-end\">\n    <button mat-button mat-dialog-close>{{'GENERAL.CANCEL' | transloco}}</button>&nbsp;\n    <button mat-flat-button color=\"primary\" [disabled]=\"!url.value\" (click)=\"addImage(url.value)\" mat-dialog-close>{{'FIELDS.GALLERY.ADD_IMAGE' | transloco}}</button>\n  </mat-dialog-actions>\n</ng-template>\n\n<!--Image sort-->\n<ng-template #imagesSort>\n  <h1 mat-dialog-title>{{'FIELDS.GALLERY.SORT_IMAGES' | transloco}}</h1>\n\n  <mat-dialog-content>\n\n    <div\n      class=\"sort-wrapper\"\n      cdkDropList\n      (cdkDropListDropped)=\"sortDrop($event)\">\n\n      <div class=\"sort-box\" *ngFor=\"let val of cData.control.value; index as index; first as first; last as last;\" cdkDrag>\n        <img class=\"sort-image\" [src]=\"(val.data || val) | jpSanitize:'resourceUrl'\">\n        <div class=\"flex-1\"></div>\n        <div>\n          <button mat-icon-button [disabled]=\"first\" (click)=\"move(true, index)\">\n            <mat-icon>arrow_upward</mat-icon>\n          </button>\n          <button mat-icon-button [disabled]=\"last\" (click)=\"move(false, index)\">\n            <mat-icon>arrow_downward</mat-icon>\n          </button>\n          <button mat-icon-button cdkDragHandle>\n            <mat-icon>drag_indicator</mat-icon>\n          </button>\n        </div>\n      </div>\n\n    </div>\n  </mat-dialog-content>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".fb-gallery{border:1px dashed var(--tertiary);margin-bottom:1.25em;position:relative}.fb-gallery-list{cursor:-webkit-grab;cursor:grab;display:flex;flex-wrap:wrap}.fb-gallery-list-placeholder{border:2px dashed var(--tertiary)}.fb-gallery-list-image,.fb-gallery-list-placeholder{flex-basis:33.33333%;padding-bottom:33.33333%;position:relative;width:33.33333%}.fb-gallery-list-image{background:#eee;border:2px solid #fff}.fb-gallery-list-image-inner,.fb-gallery-list-image>div{height:100%;position:absolute;width:100%}.fb-gallery-list-image-inner{-o-object-fit:contain;left:0;object-fit:contain;top:0}.fb-gallery-list-image-remove{background:#fff;border:1px solid #222;line-height:24px;opacity:0;position:absolute;right:0;top:0;transition:.2s;visibility:hidden}.fb-gallery-list-image:hover .fb-gallery-list-image-remove{opacity:1;visibility:visible}.fb-gallery:before{bottom:0;content:\"Drop To Upload\";display:none;font-size:20px;left:0;margin:auto;position:absolute;right:0;text-align:center;top:0}.fb-gallery.active{background:#ccc;border:3px dashed var(--tertiary)}.fb-gallery.active:before{display:block}.sort-wrapper{background:#fff;border:1px solid #ccc;border-radius:4px;display:block;max-width:100%;min-height:60px;overflow:hidden}.sort-image{-o-object-fit:cover;height:40px;object-fit:cover;width:40px}.sort-box{align-items:center;background:#fff;border-bottom:1px solid #ccc;box-sizing:border-box;color:rgba(0,0,0,.87);display:flex;flex-direction:row;font-size:14px;justify-content:space-between;padding:20px 10px}.sort-box:last-child{border:none}.cdk-drag-preview{border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-sizing:border-box}.cdk-drag-placeholder{opacity:.3}.cdk-drag-animating,.cdk-drop-list-dragging .sort-box:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"]
            },] }
];
GalleryComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_DATA,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_URL,] }] },
    { type: MatDialog },
    { type: ChangeDetectorRef },
    { type: HttpClient },
    { type: StorageService },
    { type: FormBuilderService },
    { type: ViewportRuler },
    { type: TranslocoService },
    { type: MatSnackBar }
];
GalleryComponent.propDecorators = {
    listGroup: [{ type: ViewChild, args: [CdkDropListGroup, { static: true },] }],
    placeholder: [{ type: ViewChild, args: [CdkDropList, { static: true },] }],
    modalTemplate: [{ type: ViewChild, args: ['modal', { static: true },] }],
    imagesSort: [{ type: ViewChild, args: ['imagesSort', { static: true },] }],
    fileEl: [{ type: ViewChild, args: ['file', { static: true },] }]
};
function __indexOf(collection, node) {
    return Array.prototype.indexOf.call(collection, node);
}
/** Determines whether an event is a touch event. */
function __isTouchEvent(event) {
    return event.type.startsWith('touch');
}
function __isInsideDropListClientRect(dropList, x, y) {
    const { top, bottom, left, right } = dropList.element.nativeElement.getBoundingClientRect();
    return y >= top && y <= bottom && x >= left && x <= right;
}
//# sourceMappingURL=data:application/json;base64,