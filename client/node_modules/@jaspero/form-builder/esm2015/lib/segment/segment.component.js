import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Component, HostBinding, Inject, Injector } from '@angular/core';
import { get } from 'json-pointer';
import { SEGMENT_DATA } from '../utils/create-segment-injector';
import { filterAndCompileSegments } from '../utils/filter-and-compile-segments';
export class SegmentComponent {
    constructor(sData, injector) {
        this.sData = sData;
        this.injector = injector;
        this.nestedArraySegments = [];
        this.arrayFields = [];
    }
    ngOnInit() {
        this.segment = this.sData.segment;
        this.classes = this.sData.segment.classes.join(' ');
        this.pointers = this.sData.parser.pointers;
        this.id = this.sData.segment.id || '';
        /**
         * Each segment compiles all nested segments
         */
        this.nestedSegments = filterAndCompileSegments(this.sData.segment.nestedSegments || [], this.sData.parser, this.sData.definitions, this.injector, this.segment.entryValue);
        const array = this.segment.array;
        /**
         * Add array items if necessary
         */
        if (array && this.segment.entryValue) {
            let values;
            try {
                values = get(this.segment.entryValue, array);
            }
            catch (e) { }
            if (values) {
                values.forEach(() => this.addArrayItem(false));
                this.pointers[array].control.patchValue(values);
                for (let i = 0; i < values.length; i++) {
                    // @ts-ignore
                    this.sData.parser.loadHooks(this.pointers[array].arrayPointers[i]);
                }
            }
        }
    }
    addArrayItem(loadHook = true) {
        const array = this.segment.array;
        const pointers = this.sData.parser.addArrayItem((this.sData.parent || '') + array, loadHook, this.sData.parent ? {
            pointer: this.sData.parent,
            index: 0
        } : undefined);
        let fields;
        if (this.segment.fields && this.segment.fields.length) {
            fields = this.segment.fields.map(key => {
                key = (this.sData.parent || '') + key;
                return this.sData.parser.field(key, pointers[key], this.sData.definitions, true, array);
            });
        }
        else {
            fields = [this.sData.parser.field(array, Object.assign(Object.assign({}, this.pointers[array]), { control: pointers }), this.sData.definitions)];
        }
        this.arrayFields.unshift(fields);
        this.nestedArraySegments.unshift(this.nestedSegments = filterAndCompileSegments(this.sData.segment.nestedSegments || [], this.sData.parser, this.sData.definitions, this.injector, this.segment.entryValue, this.segment.array));
    }
    moveArray(up, fromIndex) {
        let toIndex;
        if (up) {
            toIndex = fromIndex === 0 ? this.arrayFields.length - 1 : fromIndex - 1;
        }
        else {
            toIndex = fromIndex === (this.arrayFields.length - 1) ? 0 : fromIndex + 1;
        }
        moveItemInArray(this.arrayFields, fromIndex, toIndex);
        moveItemInArray(this.nestedArraySegments, fromIndex, toIndex);
        this.sData.parser.moveArrayItem((this.sData.parent || '') + this.segment.array, fromIndex, toIndex, this.sData.parent ? {
            pointer: this.sData.parent,
            index: 0
        } : undefined);
    }
    removeArrayItem(index) {
        this.sData.parser.removeArrayItem((this.sData.parent || '') + this.segment.array, index, this.sData.parent ? {
            pointer: this.sData.parent,
            index: 0
        } : undefined);
        this.nestedArraySegments.splice(index, 1);
        this.arrayFields.splice(index, 1);
    }
}
SegmentComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-segment',
                template: ''
            },] }
];
SegmentComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SEGMENT_DATA,] }] },
    { type: Injector }
];
SegmentComponent.propDecorators = {
    classes: [{ type: HostBinding, args: ['class',] }],
    id: [{ type: HostBinding, args: ['id',] }]
};
//# sourceMappingURL=data:application/json;base64,