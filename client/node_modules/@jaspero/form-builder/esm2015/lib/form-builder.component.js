import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Injector, Input, Optional, Output } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { SegmentType } from './enums/segment-type.enum';
import { State } from './enums/state.enum';
import { FormBuilderService } from './form-builder.service';
import { CUSTOM_FIELDS } from './utils/custom-fields';
import { filterAndCompileSegments } from './utils/filter-and-compile-segments';
import { Parser } from './utils/parser';
import { ROLE } from './utils/role';
export class FormBuilderComponent {
    constructor(injector, role, customFields, cdr, service) {
        this.injector = injector;
        this.role = role;
        this.customFields = customFields;
        this.cdr = cdr;
        this.service = service;
        this.valueChanges = new EventEmitter();
        this.validityChanges = new EventEmitter();
        this.state = State.Create;
    }
    ngOnChanges(changes) {
        if (changes.data) {
            this.render();
        }
        if (changes.value && this.form) {
            this.form.patchValue(changes.value.currentValue);
        }
    }
    ngOnDestroy() {
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        if (this.statusSubscription) {
            this.statusSubscription.unsubscribe();
        }
    }
    process() {
        this.parser.preSaveHooks(this.state);
        return this.form.getRawValue();
    }
    save(collectionId, documentId) {
        const toExec = this.service.saveComponents.map(comp => comp.save(collectionId, documentId));
        return toExec.length ? forkJoin(toExec) : of({});
    }
    saveAndProcess(collectionId, documentId) {
        this.process();
        return this.save(collectionId, documentId);
    }
    render() {
        const value = this.data.value || {};
        const definitions = this.data.definitions || {};
        this.parser = new Parser(this.data.schema, this.injector, this.state, this.role, definitions, this.customFields);
        this.form = this.parser.buildForm(value, [], '/', false);
        this.parser.loadHooks();
        this.segments = filterAndCompileSegments(this.data.segments ||
            [{
                    title: '',
                    fields: Object.keys(this.parser.pointers),
                    columnsDesktop: 12,
                    type: SegmentType.Empty
                }], this.parser, definitions, this.injector, value);
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        if (this.statusSubscription) {
            this.statusSubscription.unsubscribe();
        }
        this.changeSubscription = this.form.valueChanges
            .subscribe(val => {
            this.valueChanges.emit(val);
        });
        this.statusSubscription = this.form.statusChanges
            .subscribe(val => {
            this.validityChanges.emit(val === 'VALID');
        });
        this.cdr.markForCheck();
    }
}
FormBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'fb-form-builder',
                template: "<div class=\"grid\">\n  <ng-container *ngFor=\"let segment of segments\">\n    <ng-template [cdkPortalOutlet]=\"segment.component\"></ng-template>\n  </ng-container>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [FormBuilderService]
            },] }
];
FormBuilderComponent.ctorParameters = () => [
    { type: Injector },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ROLE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CUSTOM_FIELDS,] }] },
    { type: ChangeDetectorRef },
    { type: FormBuilderService }
];
FormBuilderComponent.propDecorators = {
    data: [{ type: Input }],
    value: [{ type: Input }],
    id: [{ type: Input }],
    valueChanges: [{ type: Output }],
    validityChanges: [{ type: Output }],
    state: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1idWlsZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Zvcm0tYnVpbGRlci9zcmMvbGliL2Zvcm0tYnVpbGRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sUUFBUSxFQUNSLEtBQUssRUFHTCxRQUFRLEVBQ1IsTUFBTSxFQUVQLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxRQUFRLEVBQUUsRUFBRSxFQUFlLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFHMUQsT0FBTyxFQUFDLGFBQWEsRUFBZSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBUWxDLE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFDVSxRQUFrQixFQUdsQixJQUFZLEVBR1osWUFBMEIsRUFDMUIsR0FBc0IsRUFDdEIsT0FBMkI7UUFSM0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUdsQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBR1osaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFDdEIsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFhckMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFB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QUFFO1lBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN2QztRQUVELElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN2QztRQUVELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7YUFDN0MsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFFTCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhO2FBQzlDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7O1lBdkpGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQiwyTEFBNEM7Z0JBQzVDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzthQUNoQzs7O1lBekJDLFFBQVE7eUNBNkJMLFFBQVEsWUFDUixNQUFNLFNBQUMsSUFBSTs0Q0FFWCxRQUFRLFlBQ1IsTUFBTSxTQUFDLGFBQWE7WUFyQ3ZCLGlCQUFpQjtZQWdCWCxrQkFBa0I7OzttQkEyQnZCLEtBQUs7b0JBR0wsS0FBSztpQkFHTCxLQUFLOzJCQUdMLE1BQU07OEJBR04sTUFBTTtvQkFPTixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPcHRpb25hbCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Zm9ya0pvaW4sIG9mLCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtTZWdtZW50VHlwZX0gZnJvbSAnLi9lbnVtcy9zZWdtZW50LXR5cGUuZW51bSc7XG5pbXBvcnQge1N0YXRlfSBmcm9tICcuL2VudW1zL3N0YXRlLmVudW0nO1xuaW1wb3J0IHtGb3JtQnVpbGRlclNlcnZpY2V9IGZyb20gJy4vZm9ybS1idWlsZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHtDb21waWxlZFNlZ21lbnR9IGZyb20gJy4vaW50ZXJmYWNlcy9jb21waWxlZC1zZWdtZW50LmludGVyZmFjZSc7XG5pbXBvcnQge0Zvcm1CdWlsZGVyRGF0YX0gZnJvbSAnLi9pbnRlcmZhY2VzL2Zvcm0tYnVpbGRlci1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQge0NVU1RPTV9GSUVMRFMsIEN1c3RvbUZpZWxkc30gZnJvbSAnLi91dGlscy9jdXN0b20tZmllbGRzJztcbmltcG9ydCB7ZmlsdGVyQW5kQ29tcGlsZVNlZ21lbnRzfSBmcm9tICcuL3V0aWxzL2ZpbHRlci1hbmQtY29tcGlsZS1zZWdtZW50cyc7XG5pbXBvcnQge1BhcnNlcn0gZnJvbSAnLi91dGlscy9wYXJzZXInO1xuaW1wb3J0IHtST0xFfSBmcm9tICcuL3V0aWxzL3JvbGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmYi1mb3JtLWJ1aWxkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1idWlsZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW0Zvcm1CdWlsZGVyU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybUJ1aWxkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChST0xFKVxuICAgIHByaXZhdGUgcm9sZTogc3RyaW5nLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChDVVNUT01fRklFTERTKVxuICAgIHByaXZhdGUgY3VzdG9tRmllbGRzOiBDdXN0b21GaWVsZHMsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgc2VydmljZTogRm9ybUJ1aWxkZXJTZXJ2aWNlXG4gICkgeyB9XG5cbiAgQElucHV0KClcbiAgZGF0YTogRm9ybUJ1aWxkZXJEYXRhO1xuXG4gIEBJbnB1dCgpXG4gIHZhbHVlOiBhbnk7XG5cbiAgQElucHV0KClcbiAgaWQ6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgdmFsdWVDaGFuZ2VzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgpXG4gIHZhbGlkaXR5Q2hhbmdlcyA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBmb3JtOiBGb3JtR3JvdXA7XG4gIHBhcnNlcjogUGFyc2VyO1xuICBzZWdtZW50czogQ29tcGlsZWRTZWdtZW50W107XG5cbiAgQElucHV0KClcbiAgc3RhdGU6IFN0YXRlID0gU3RhdGUuQ3JlYXRlO1xuXG4gIHByaXZhdGUgY2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgc3RhdHVzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmRhdGEpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMudmFsdWUgJiYgdGhpcy5mb3JtKSB7XG4gICAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZShjaGFuZ2VzLnZhbHVlLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXR1c1N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdGF0dXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcm9jZXNzKCkge1xuICAgIHRoaXMucGFyc2VyLnByZVNhdmVIb29rcyhcbiAgICAgIHRoaXMuc3RhdGVcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybS5nZXRSYXdWYWx1ZSgpO1xuICB9XG5cbiAgc2F2ZShcbiAgICBjb2xsZWN0aW9uSWQ6IHN0cmluZyxcbiAgICBkb2N1bWVudElkOiBzdHJpbmdcbiAgKSB7XG5cbiAgICBjb25zdCB0b0V4ZWMgPSB0aGlzLnNlcnZpY2Uuc2F2ZUNvbXBvbmVudHMubWFwKGNvbXAgPT5cbiAgICAgIGNvbXAuc2F2ZShjb2xsZWN0aW9uSWQsIGRvY3VtZW50SWQpXG4gICAgKTtcblxuICAgIHJldHVybiB0b0V4ZWMubGVuZ3RoID8gZm9ya0pvaW4odG9FeGVjKSA6IG9mKHt9KTtcbiAgfVxuXG4gIHNhdmVBbmRQcm9jZXNzKFxuICAgIGNvbGxlY3Rpb25JZDogc3RyaW5nLFxuICAgIGRvY3VtZW50SWQ6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLnByb2Nlc3MoKTtcblxuICAgIHJldHVybiB0aGlzLnNhdmUoXG4gICAgICBjb2xsZWN0aW9uSWQsXG4gICAgICBkb2N1bWVudElkXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhLnZhbHVlIHx8IHt9O1xuICAgIGNvbnN0IGRlZmluaXRpb25zID0gdGhpcy5kYXRhLmRlZmluaXRpb25zIHx8IHt9O1xuXG4gICAgdGhpcy5wYXJzZXIgPSBuZXcgUGFyc2VyKFxuICAgICAgdGhpcy5kYXRhLnNjaGVtYSxcbiAgICAgIHRoaXMuaW5qZWN0b3IsXG4gICAgICB0aGlzLnN0YXRlLFxuICAgICAgdGhpcy5yb2xlLFxuICAgICAgZGVmaW5pdGlvbnMsXG4gICAgICB0aGlzLmN1c3RvbUZpZWxkc1xuICAgICk7XG5cbiAgICB0aGlzLmZvcm0gPSB0aGlzLnBhcnNlci5idWlsZEZvcm0oXG4gICAgICB2YWx1ZSxcbiAgICAgIFtdLFxuICAgICAgJy8nLFxuICAgICAgZmFsc2VcbiAgICApO1xuXG4gICAgdGhpcy5wYXJzZXIubG9hZEhvb2tzKCk7XG5cbiAgICB0aGlzLnNlZ21lbnRzID0gZmlsdGVyQW5kQ29tcGlsZVNlZ21lbnRzKFxuICAgICAgdGhpcy5kYXRhLnNlZ21lbnRzIHx8XG4gICAgICBbe1xuICAgICAgICB0aXRsZTogJycsXG4gICAgICAgIGZpZWxkczogT2JqZWN0LmtleXModGhpcy5wYXJzZXIucG9pbnRlcnMpLFxuICAgICAgICBjb2x1bW5zRGVza3RvcDogMTIsXG4gICAgICAgIHR5cGU6IFNlZ21lbnRUeXBlLkVtcHR5XG4gICAgICB9XSxcbiAgICAgIHRoaXMucGFyc2VyLFxuICAgICAgZGVmaW5pdGlvbnMsXG4gICAgICB0aGlzLmluamVjdG9yLFxuICAgICAgdmFsdWVcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXR1c1N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdGF0dXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMuZm9ybS52YWx1ZUNoYW5nZXNcbiAgICAgIC5zdWJzY3JpYmUodmFsID0+IHtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZXMuZW1pdCh2YWwpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnN0YXR1c1N1YnNjcmlwdGlvbiA9IHRoaXMuZm9ybS5zdGF0dXNDaGFuZ2VzXG4gICAgICAuc3Vic2NyaWJlKHZhbCA9PiB7XG4gICAgICAgIHRoaXMudmFsaWRpdHlDaGFuZ2VzLmVtaXQodmFsID09PSAnVkFMSUQnKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cbiJdfQ==